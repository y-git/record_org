* TODO design
engine is contained with jobs

other files support service for jobs(inner service) and user(outer service)






ecs api is for user
(ecs api should use system)

ecs job service and renderer admin is for job

(rename admin to xxxJobService?xxxJS?)
(rename api file to xxxBuildService? )


(add xxxScriptService(xxxComponentService?) file when add script component)

(add xxxMaterialService file when add custom material component?)




modules


add xxxModuleService?





extract service layers(e.g. build service layer, ...)
add contract check in them!




engine is service!




services:
module service

////job service

build service

script service

material service




modules support service





service consumer:
module(module consume other modules' moduleService), job, script component, custom material component, build logic















modules:
time
(
move computeElapseTime out to engine?
)
ecs
renderer
asset
core
device
structure


** move each service supports out to be new project(manage through npm)

module, job service support in module project

build, script, material service support in engine project


*** move job out to be new project?

** service supporter has its own data in state
(e.g. each component, each device, glsllocation/glslsender, ... has its own data)



////*** module, job service accept module states(own or other module's state)
*** module service accept module states(own or other module's state)


*** build, script, material service accept one engine state



** compare to microservice

job -> process





** 



system is for operate state

common is for share logic between systems


utils is for logic which don't operate state
(utils can invoke other utils)


share is for share logic between no worker and worker

** TODO advanced
*** TODO split ecs to small modules?
each component is one module?
gameObject is one module?


* TODO blog
<<microservice in game engine>> ?

