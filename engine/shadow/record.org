* shadow map
A framebuffer object however is not complete without a color buffer so we need to explicitly tell OpenGL we're not going
to render any color data. We do this by setting both the read and draw buffer to GL_NONE with glDrawBuffer and
glReadbuffer. 




Because we're modelling a directional light source all its light rays are parallel. For this reason we're going to use
an orthographic projection matrix for the light source where there is no perspective deform: 


GLfloat near_plane = 1.0f, far_plane = 7.5f;
glm::mat4 lightProjection = glm::ortho(-10.0f, 10.0f, -10.0f, 10.0f, near_plane, far_plane);  






** Shadow acne
With the bias applied all the samples get a depth smaller than the surface's depth and thus the entire surface is correctly lit without any shadows. We can implement such a bias as follows:


float bias = 0.005;
float shadow = currentDepth - bias > closestDepth  ? 1.0 : 0.0;  
A shadow bias of 0.005 solves the issues of our scene by a large extent, but some surfaces that have a steep angle to the light source might still produce shadow acne. A more solid approach would be to change the amount of bias based on the surface angle towards the light: something we can solve with the dot product:


float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.005);  
Here we have a maximum bias of 0.05 and a minimum of 0.005 based on the surface's normal and light direction. This way surfaces like the floor that are almost perpendicular to the light source get a small bias, while surfaces like the cube's side-faces get a much larger bias. The following image shows the same scene but now with a shadow bias: much better results.

Shadow mapped images, with (sloped) shadow bias applied.
Choosing the correct bias value(s) requires some tweaking as this will be different in each scene, but most of the time it's simply a matter of incrementing the bias until all acne is removed.




* optimize
** more and more slow during shadowMap sample running
