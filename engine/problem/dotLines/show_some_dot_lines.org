1. point light shadow sample has some dot lines!
2. terrain->layer sample has some dot lines
   refer to the image
it's probably the judge of "isInLayer" in terrain_layer_fragment.glsl is minor wrong!

sample code:
<!DOCTYPE html>
<html>
<head lang="en">
    <meta charset="UTF-8">
    <title></title>

    <script src="../../../dist/wd.innerLib.js" type="text/javascript"></script>
    <script src="../../../dist/wd.debug.js" type="text/javascript"></script>
</head>
<body>

<script>
    window.onload = function () {
        wd.Main.setConfig({
            //open contract check
            isTest: true,
            screenSize: wd.EScreenSize.FULL
        }).init();

        wd.LoaderManager.getInstance().load([
            {url: "../../asset/texture/terrain/heightMap.png", id: "heightMap"},
            {url: "../../asset/texture/terrain/mixMap.png", id: "mixMap"},
            {url: "../../asset/texture/terrain/floor.png", id: "floor"},
            {url: "../../asset/texture/terrain/grass.png", id: "grass"},
            {url: "../../asset/texture/terrain/rock.png", id: "rock"},


            {url: "../../asset/texture/terrain/floorn.png", id: "floorn"},
            {url: "../../asset/texture/terrain/grassn.png", id: "grassn"},
            {url: "../../asset/texture/terrain/rockn.png", id: "rockn"}
        ]).subscribe(null, null, function () {
            initSample();
        });

        function initSample() {
            var director = wd.Director.getInstance();

            director.scene.addChild(createTerrain());
            director.scene.addChild(createAmbientLight());
            director.scene.addChild(createDirectionLight());
            director.scene.addChild(createCamera());

            director.start();
        }

        function createTerrain() {
            var material = wd.TerrainMaterial.create();


            var grass = wd.LoaderManager.getInstance().get("grass").toTexture();

            var floor = wd.LoaderManager.getInstance().get("floor").toTexture();



            material.layer.mapData = [
                {
                    minHeight:0,
                    maxHeight:40,
                    diffuseMap:grass
                },
//                {
//                    minHeight:20,
//                    maxHeight:30,
//                    diffuseMap:floor,
//                }
//                {
//                    minHeight:30,
//                    maxHeight:50,
//                    diffuseMap:wd.FireProceduralTexture.create()
//                }
            ];



//            material.layer.blendMethod = wd.ETerrainLayerBlendMethod.CUT;

//            material.diffuseMap = grass;




            material.shading = wd.EShading.SMOOTH;


            var geometry = wd.TerrainGeometry.create();
            geometry.material = material;
            geometry.subdivisions = 50;
            geometry.range = {
                width:50,
                height:50
            };
            geometry.minHeight = 0;
            geometry.maxHeight = 50;
            geometry.heightMapAsset = wd.LoaderManager.getInstance().get("heightMap");
            geometry.isHeightMapStoreHeightInEachPixel = false;
//            geometry.drawMode = wd.EDrawMode.LINE_STRIP;


            var gameObject = wd.GameObject.create();
            gameObject.addComponent(geometry);

            gameObject.addComponent(wd.MeshRenderer.create());


            return gameObject;
        }

        function createAmbientLight() {
            var ambientLightComponent = wd.AmbientLight.create();
            ambientLightComponent.color = wd.Color.create("rgb(30, 30, 30)");

            var ambientLight = wd.GameObject.create();
            ambientLight.addComponent(ambientLightComponent);

            return ambientLight;
        }

        function createDirectionLight() {
            var directionLightComponent = wd.DirectionLight.create();
            directionLightComponent.color = wd.Color.create("#ffffff");
            directionLightComponent.intensity = 1;


            var directionLight = wd.GameObject.create();
            directionLight.addComponent(directionLightComponent);

//            directionLight.transform.translate(wd.Vector3.create(10, 20, 30));
            directionLight.transform.translate(wd.Vector3.create(10, 20, 0));

            return directionLight;
        }

        function createCamera() {
            var camera = wd.GameObject.create(),
                    view = wd.Director.getInstance().view,
                    cameraComponent = wd.PerspectiveCamera.create();

            cameraComponent.fovy = 60;
            cameraComponent.aspect = view.width / view.height;
            cameraComponent.near = 0.1;
            cameraComponent.far = 1000;

            var controller = wd.ArcballCameraController.create(cameraComponent);
            controller.theta = Math.PI / 5;
            controller.distance = 400;

            camera.addComponent(controller);

            return camera;
        }
    };
</script>
</body>
</html>   
 
   
terrain_layer_fragment.glsl:
@varDeclare
struct LayerHeightData {
    float minHeight;
    float maxHeight;
    vec4 repeatRegion;
};
uniform LayerHeightData u_layerHeightDatas[LAYER_COUNT];

//sampler2D can't be contained in struct
uniform sampler2D u_layerSampler2Ds[LAYER_COUNT];


varying vec2 v_layerTexCoord;
@end

@funcDefine
vec4 getLayerTextureColor(in sampler2D layerSampler2Ds[LAYER_COUNT], in LayerHeightData layerHeightDatas[LAYER_COUNT]){
    vec4 color = vec4(0.0);
    bool isInLayer = false;

    float height = v_worldPosition.y;

    for(int i = 0; i < LAYER_COUNT; i++){
        if(height >= layerHeightDatas[i].minHeight && height < layerHeightDatas[i].maxHeight){
            vec4 repeatRegion = layerHeightDatas[i].repeatRegion;

            //todo blend color
            //todo optimize:move 'v_layerTexCoord * repeatRegion.zw + repeatRegion.xy' to vertex shader?
            color += texture2D(layerSampler2Ds[i], v_layerTexCoord * repeatRegion.zw + repeatRegion.xy);

            isInLayer = true;

            break;
        }
    }

    return isInLayer ? color : vec4(1.0);
}
@end


@body

totalColor *= getLayerTextureColor(u_layerSampler2Ds, u_layerHeightDatas);
@end




