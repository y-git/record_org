* Wonder.js
Wonder.js is a 3D Javascript Game Engine. It is currently in alpha, any contributions are very welcome.

[[https://travis-ci.org/yyc-git/Wonder.js?branch%3Dmaster][https://travis-ci.org/yyc-git/Wonder.js.png]] [[https://codecov.io/github/yyc-git/Wonder.js?branch=master][https://codecov.io/github/yyc-git/Wonder.js/coverage.svg?branch=master]]

* Goal
To build a elegant, beautiful 3D game engine with full functions.
* Document
- [[https://github.com/yyc-git/Wonder.js/wiki][wiki]]
- [[https://github.com/yyc-git/Wonder.js/wiki/Roadmap][Roadmap]]

Please learn samples in examples/samples/ to get more info.
* Design
- Data Oriented Design
- ECS(Entity-Component-System)

  use components to assemble game object.
- Functional Reactive Programming

  use Wonder-FRP library to handle async operation in frp way.
- Functional Programming
- Code Contract

  use contract to improve code quality and help debug.
- Event Driven

  use event system to bind dom/custom event or to implement observer design pattern in frp way.
* Contributing
Join us, We can create the amazing 3D world together!
* Feature


* Tool

* Usage
Include library in your html:
#+BEGIN_SRC html
  <script src="dist/wd.js"></script>
#+END_SRC
Here shows a spinning cube sample:
#+BEGIN_SRC js
  <script>
      window.onload = function () {
          //set full screen and init engine
          wd.Main.setConfig({
              screenSize: wd.EScreenSize.FULL
          }).init();

          initSample();

          function initSample() {
              var director = wd.Director.getInstance();

              wd.addSceneChild(createBox());
              wd.addSceneChild(createCamera());

              director.start();
          }

          function createBox() {
              var material = wd.createBasicMaterial();
              wd.setMaterialColor(material, wd.Color.create("rgb(1.0,0.0,1.0)"));


              var geometry = wd.createBoxGeometry();
              wd.setBoxGeometryConfigData(geometry, {
                width:5,
                height:5,
                depth:5
            });

              var gameObject = wd.createGameObject();

              wd.addGameobjectComponent(gameObject, geometry);
              wd.addGameobjectComponent(gameObject, wd.createMeshRenderer());

              return gameObject;
          }

          function createCamera() {
              var camera = wd.GameObject.create(),
                  view = wd.Director.getInstance().view,
                  cameraComponent = wd.PerspectiveCamera.create();

              cameraComponent.fovy = 60;
              cameraComponent.aspect = view.width / view.height;
              cameraComponent.near = 0.1;
              cameraComponent.far = 100;

              var controller = wd.BasicCameraController.create(cameraComponent);
              camera.addComponent(controller);

              camera.transform.translate(wd.Vector3.create(0, 0, 30));

              return camera;

            var view = wd.Director.getInstance().view;

            var cameraObj = wd.createGameObject();
            var cameraController = wd.createCameraController();

            wd.setCameraNear(cameraController, 0.1);
            wd.setCameraFar(cameraController, 1000);
            wd.setPerspectiveCameraFovy(cameraController, 60);
            wd.setPerspectiveCameraAspect(cameraController, view.width / view.height);

            wd.addGameobjectComponent(cameraObj, cameraController);

            
            var transform = wd.getGameObjectTransform(cameraObj);

            wd.setThreeDTransformPosition(transform, wd.Vector3.create(0,0, 40));

            return cameraObj;
          }
      };
  </script>
#+END_SRC
* How to build
* How to test
* License
MIT Licence
