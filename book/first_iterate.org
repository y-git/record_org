* 今日计划
** TODO 提出最小框架

** TODO 支持用户扩展





* 完成事项
////** TODO 提出最小框架



////** TODO 支持用户扩展
*** TODO editor
editor extend script, store in .wet file?


**** TODO ui
json?

reason?
(dynamic compile?)



**** TODO asset
refer to https://blog.csdn.net/LIQIANGEASTSUN/article/details/50510615





*** TODO engine
engine extend script, store in .wet file?


**** TODO job


**** TODO shader


**** TODO component


**** TODO service







** DONE upgrade reason, reason-react, bucklescript
CLOSED: [2019-10-03 Thu 07:09]
*** DONE learn
CLOSED: [2019-10-01 Tue 17:47]



*** DONE prepare dev environment
CLOSED: [2019-10-03 Thu 07:09]
//pass demo(editor)



** DONE write blog to say "begin to write book"
CLOSED: [2019-10-03 Thu 14:26]
write

add to gitbook(invite reader to pre-read online)

create qq group for feedback


push to zhihu,bokeyuan,website->blog








** DONE 快速写一个最小Demo(use webgl1)
CLOSED: [2019-10-05 Sat 14:08]
*** DONE 实现demo, and package?(Demo1,原型，但可以运行。如渲染一个三角形)
CLOSED: [2019-10-05 Sat 14:07]
render three triangles

basic encapulate(refer to WebGL编程指南)

exec in html


*** DONE 分析代码
CLOSED: [2019-10-05 Sat 14:08]

代码组织结构(different npm? folder?)

说明矩阵变化等


** DONE refactor
CLOSED: [2019-10-06 Sun 11:00]
*** DONE separate type
CLOSED: [2019-10-06 Sun 11:00]

e.g. extract Vector3Type from Vector3?




** DONE extract最小3d引擎
CLOSED: [2019-10-08 Tue 14:12]
*** TODO 分析 and extract

analyze border:
how can user use it?


extract use api:
init
start


give pseudo use code: (use api)



move init logic to init


move start logic to start


utils logic



extract draw logic



package to dist file



invoke dist file in .html for example








** DONE 最小编辑器
CLOSED: [2019-10-09 Wed 16:13]


Q:
//useReducer return dispatch func(like send), how to get real dispatch func?



//commit and update,publish engine


//clearColor


//check re-render




*** DONE 分析 and extract
CLOSED: [2019-10-09 Wed 16:13]


analyze border:
how can user use it?

give image (draft image with only one "start" button)

start = loop




give pseudo code: (use engine api)




use reason-react to implement:
extract App, Index
(no MainEditor ui!!!???)
import and use engine api






package to dist file



invoke dist file in .html for example



////** TODO refactor
////*** TODO extract common npm for engine, editor
extract tiny-wonder-webgl npm



////** TODO rewrite
use webgl2

glsl->2 add "u_alpha"










** DONE 优化
CLOSED: [2019-10-10 Thu 18:23]
*** DONE engine
CLOSED: [2019-10-10 Thu 18:23]
//benchmark test: show triangles

//find problem:
profile
timeline?
memory




optimize:
get shader info only when debug




cache location

store send func when init shader

cache uniform data



////extract shader index



set camera data only once

////(split uniform data to camera data, model data)







use vao

just last vao, uniform data




** DONE add request analyse word(compare)
CLOSED: [2019-10-12 Sat 20:20]




** DONE finish read "designing with types"
CLOSED: [2019-10-14 Mon 10:39]


** DONE test wrap type performance!!!
CLOSED: [2019-10-14 Mon 11:35]




** DONE finish 10 pages(need finish on Monday)
CLOSED: [2019-10-14 Mon 21:06]







** DONE learn <<Domain Model>>
CLOSED: [2019-10-19 Sat 17:15]



** DONE read his series and think how to use!
CLOSED: [2019-10-19 Sat 17:15]



** DONE read bucklescript->all docs
CLOSED: [2019-10-19 Sat 18:32]



////** TODO learn <<函数响应式领域建模>>




** DONE summary and collect optimize references for mickey
CLOSED: [2019-10-21 Mon 10:00]



** DONE rename package.json->name to extract-tiny-wonder-engine
CLOSED: [2019-10-24 Thu 10:20]
*** DONE fix Book-Extract-Engine
CLOSED: [2019-10-24 Thu 10:20]

*** DONE fix Book-Extract-Editor correspondingly
CLOSED: [2019-10-24 Thu 10:20]


** DONE fix: Book-Extract-Engine and after:  "use wrap type"
CLOSED: [2019-10-24 Thu 13:01]
(TODO record: fix Wonder.js, Wonder-Editor)

*** DONE Engine use wrap type
CLOSED: [2019-10-23 Wed 13:08]

any performance problem???

good perf!!!

Render(especially the iterate) should use valueType!(convert wrap type to value type before render iterate!)


Init->init shader(the iterate) should use valueType!




*** DONE Editor use wrap type
CLOSED: [2019-10-24 Thu 13:01]
//update editor

//add wrap type:
(no performance problem!!!)
type loopId;


** DONE fix:  Book-Extract-Engine and after: "handle error"
CLOSED: [2019-10-24 Thu 13:01]
(TODO record: fix Wonder.js, Wonder-Editor)


*** DONE Engine use Result?
CLOSED: [2019-10-23 Wed 18:49]

explain why use Result against "throw exception":

the advantage of use result:
1.explictly show "it may has error" in type

e.g. 
for setTransformTranslation api, if throw exception, the editor not know it throw from the type and compile and the func
name! so editor not handle it(how should editor handle the exception: catch it and log error message)!


*** DONE Editor use Result
CLOSED: [2019-10-24 Thu 13:01]



** DONE fix: Book-Extract-Engine and after:  use list instead of array(use gameObject list)
CLOSED: [2019-10-24 Thu 08:20]
need test perf!!!

or still use array?
(but can alwawys use list in editor)


https://2ality.com/2018/01/lists-arrays-reasonml.html


** DONE fix: Book-Extract-Engine and after: api should be : js api, editor api
CLOSED: [2019-10-24 Thu 13:02]


(TODO record: fix Wonder.js, Wonder-Editor)




** DONE fix(editor): Book-Extract-Editor: rename editor state to PersistentState
CLOSED: [2019-10-24 Thu 16:14]
////** TODO fix(editor): Book-Extract-Editor: remove editor state

should add discuss to text.md:
editor data can separate to:
1.show data
2.persistent data


we can have only one state(named show state instead of ui state???):
can move editorState->loopId to uiState;
mark loopId to mutable;

(should verify: change loopId shouldn't cause re-render!!!)


(disadvantage:
1.not all immutable
2.mix the two logic!
)


or we can have two states!


we choose "two states" design!!!





(TODO record: fix Wonder-Editor)







** DONE fix: Book-Demo and after: shader1: u_color, shader2: u_color1, u_color2!!!
CLOSED: [2019-10-24 Thu 18:28]
*** DONE refactor
CLOSED: [2019-10-22 Tue 16:44]
//TODO remove MatrixType

//TODO refactor Matrix->setLookAt: should accept "resultFloat32Arr" param

(
    TODO feat(Wonder.js): Matrix4Service->setLookAt: should accept "resultFloat32Arr" param
)




*** DONE fix
CLOSED: [2019-10-22 Tue 16:44]



////*** TODO fix: Book-Extract-Engine and after: store send func when init shader
need extract glsl sender data!


if not exist , not add to send arr
           AllGLSLLocationService.isUniformLocationExist(pos) ?
           AllGLSLLocationService.isAttribLocationExist(pos) ?


fix Wonder.js!(or record!!!)


*** DONE fix: Book-Optimize1 and after: cache send material uniform data->location
CLOSED: [2019-10-24 Thu 18:27]

remove vbo buffer wrap type?


** DONE update Book-Optimize1
CLOSED: [2019-10-24 Thu 18:28]
test perf:
addGameObject

render

initAll
















** TODO 改进


q1:
"how to change the second gameObject->translation?"

q2:
"if different gameObject has different material(with different material data)?"
(e.g. contain u_color(float, float, float), u_data1(float))


qn...:
"how to improve performance?"

"how to set gl stats by user?"



any more question...




////*** TODO Wonder.js: merge dev to master

*** TODO engine and editor
**** DONE add contract check
CLOSED: [2019-10-29 Tue 18:58]
//return Result type


//use sequence



//test Shader->shader, program err->info


//test perf


////need split repo to two!!!


//need split repo to two!!!


//add editor repo!

//add clearColor when stop!





////createWithoutCheck don't need contract check which should throw exception!!!



//fix HashMap->unsafeGet


**** DONE fix(all): Gl -> getXXXLocation should return Js.Nullable.t
CLOSED: [2019-10-29 Tue 18:58]

fix Shader->check location



**** TODO shader(json???)

shaders,
groups,


feat: should  move "refactor: shader(lib, json)" before "refactor: gameObject and component"!!!???
because if do "refactor: gameObject and component" first, then only has one shader(basic material->shader), can't show
different shaders with different shader libs!


***** TODO think q2: need extract glsl sender data!
store send func when init shader
can define abstract type("material data") for different material data(e.g. u_color, u_data1) for send uniform data!

need extract glsl sender data!





if not exist , not add to send arr
           AllGLSLLocationService.isUniformLocationExist(pos) ?
           AllGLSLLocationService.isAttribLocationExist(pos) ?



////extract render state, sub state?






(
refactor Wonder.js!
e.g. 
1. 
   - cache location to glslLocationRecord
   - set send data to glslSenderRecord(get pos from glslLocationRecord)
     
2.if not exist , not add to send arr




)










keep all immutable(because mutable improve performance very little!?)





***** TODO extract shader lib


***** TODO fix(Render): move "create vaos" to render iterate?

because the "a_position" is unknown!(maybe not exist!)


***** TODO extract json

（note: Dto type, domain type, serialization, deserialization

refer to 《Domain Modeling》－》 serialization
）




////set send data to glslSenderRecord


**** TODO gameObject+component
分析现有架构的问题:
think q1,q2:
now the architect is too rigid





component:
transform 
    extract translation,rotation,scale wrap type


basic material:
    refactor: move glsl into engine
geometry
meshRenderer







***** TODO think q2:
should remove abstract type("material data") for different material data(e.g. u_color, u_data1) for send uniform data!
(get data from material data by material index instead!)





**** TODO data oriented



0.设计数据

immutable

mutable








need compare perf by benchmark





**** TODO draw command array






**** TODO 引擎支持多种应用场景
- 分析现有架构的问题

- design


give pseudo code


- how to extend

////加入defer shading job

////加入ray tracing job

////编辑器如何扩展job

support mobile pipeline



**** TODO 引擎支持多线程
使用frp

job

how to run test without webgl inspector: 
log


- 分析现有架构的问题


- design


////- 给出领域模型图
give pseudo code


- how to extend

展示通过增加job和修改json，来增加更多的worker或者worker job!



***** TODO extract shader index
because when init material in render worker:
1.if use shaderIndices(shader index), can directly share it! but if use shaderNameMap(shader name), should send it to
   render worker! 
2.use "shader index" as key  instead of shader name(String type) is more fast for get shader data in map
e.g. get program, get glsl sender data




(
add "shader" type:

type shaderIndex = int;
type shader = Shader(shaderIndex);
)



***** TODO refactor: extract initShaderState, renderState from state
(should reduce one renderState/... than many small data(e.g.glslSenderRecord, ...))


cqrs: refer to <<Domain>> -> Command-Query Responsibility Segregation, Bounded Contexts Must Own Their Data Storage


**** TODO 提出“基于数据的服务”(////微服务)(or put after "add scene tree" for refactor to extract?)
////so can extract domain model(e.g. GLSL)(not conflict with service(e.g. GLSL vs GLSL service))

  


***** TODO engine

分析现有架构的问题:
1.model依赖多个state，职责不明




***** TODO editor




**** TODO 其他

- use frp for start loop









*** TODO editor


-2.update with new engine



-1.分析现有架构的问题

think q1!

////implement new request: "edit transform->local position"


0.设计数据

all immutable



1.basic

- 给出领域模型图
////- 给出测试用例
- 明确提炼迭代方法：基于Type驱动设计？


2.foler

atom_component/
composable_component/
...


3 其他
- 契约检查
////- 错误处理





**** TODO implement q1

** TODO optimize: tail-recursive





** TODO  编辑器增加场景管理功能(move this one before Redo/Undo!!!)
*** TODO extract show state from engine state
extract gameObject list data from engine state to show state!!!


update show state from engine state when re-render;
update persistent state or engine state when handle store->action(not update show state, because it is only for show!);




use "acl" layer(folder) for "extract show state from engine state" logic???
(refer to <<Domain_Modeling>>->p61)




** TODO 编辑器增加Redo/Undo功能





* 明日计划

