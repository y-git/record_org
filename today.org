* 今日计划
** TODO fix event(master)
only listen canvas dom


add api, can get state/set state from custom state data



*** TODO wonder-editor
**** TODO fix editor->event


**** TODO pass ee->arcball camera





** TODO fix light material shader
no direction,point light
add it
need re-init lightMaterial's shader



*** TODO wonder-editor
fix dispose "direction light" bug



support dynamic add direction/point light:
re-init shader?


** TODO fix direction light
use direction instead of pos




** TODO transform
add euler api




** TODO publish





** TODO wonder-editor
*** TODO inspector add a canvas for show
add engine state


add default direction light


**** TODO material,geometry asset->icon should be show canvas->snapshot
material apply to sphere geometry data


geometry apply default light material
(use line mode instead of triangle mode)



*** TODO imgui script is asset





** TODO publish
















* 完成事项
** DONE fix event(master)
CLOSED: [2018-07-27 Fri 20:14]
//only listen canvas dom


//add api, can get state/set state from custom state data



*** TODO wonder-editor
**** TODO fix editor->event


**** TODO pass ee->arcball camera









**** TODO for run, stop ee->arcball camera
add stopArcballCameraController, startArcballCameraController api



**** TODO rethink add camera controller component with @mickey
for edit
for run







*** TODO fix keyboard event




*** TODO add pointer lock?




*** TODO prevent 






*** TODO upgrade wonder.js version


** DONE transform
CLOSED: [2018-07-27 Fri 21:28]
//add euler api




////add round logic



** DONE component
CLOSED: [2018-07-28 Sat 09:08]
gameObject can add all components
(
e.g. gameObject has camera component can also add material component
)


** DONE fix light material shader
CLOSED: [2018-07-29 Sun 16:35]
no direction,point light
add it
need re-init lightMaterial's shader


*** DONE no worker
CLOSED: [2018-07-28 Sat 13:54]



////*** TODO render worker


*** DONE wonder-editor
CLOSED: [2018-07-29 Sun 16:35]
//fix dispose "direction light" bug




//update wonder.js





//fix dispose "direction light" bug:
should loopBody after dispose direction light gameObject





//fix undo/redo bug







//update wonder.js







support dynamic add direction/point light:
re-init shader?


fix dispose


set color should work!







** DONE fix direction light
CLOSED: [2018-07-29 Sun 21:35]
use direction instead of pos


** DONE add light count limit
CLOSED: [2018-07-29 Sun 10:00]





** DONE @mickey
CLOSED: [2018-07-29 Sun 21:36]
1.transform->scale:
value shouldn't be 0






** DONE fix event bug: if run, not loopBody
CLOSED: [2018-07-30 Mon 09:20]
fix

add test




update wonder.js









** DONE set canvas size api
CLOSED: [2018-08-02 Thu 08:47]



** DONE imgui
CLOSED: [2018-08-02 Thu 11:19]
//pass coordinate


//use injected api


//use uncurry


//pass import/export test



** DONE add plane(grid)
CLOSED: [2018-08-03 Fri 17:03]

support draw mode: line ?

*** DONE meshRenderer add modes
CLOSED: [2018-08-02 Thus 18:17]
//logic 


//pass compile


//render worker



//test:
//pass test

    no worker:




    worker:
InitMeshRendererRenderWorkerJob




//run test






*** DONE wdb support mode
CLOSED: [2018-08-03 Fri 17:03]
add mode and basicMaterial


//logic


//pass compile


test


****  TODO import

****  TODO export



**** TODO test
extra

//nameMap

meshRenderer

basicMaterial

lightMaterial


add default material




//convert


//assemble




//generate



//run test:
generate test: grid plane + one box + one direction light




** DONE editor
CLOSED: [2018-08-03 Fri 18:54]
add grid plane to ee


test



** DONE fix bug: redo->buffer data wrong
CLOSED: [2018-08-03 Fri 21:09]



** DONE fix bug: truck wdb wrong
CLOSED: [2018-08-03 Fri 22:19]






** DONE add get all component api
CLOSED: [2018-08-04 Sat 10:00]
get by gameObjectRecord->component map


*** DONE rewrite editor-> "get all lightMaterial components"
CLOSED: [2018-08-04 Sat 10:00]





** DONE refactor set current camera
CLOSED: [2018-08-04 Sat 16:58]
*** DONE use "basicCameraView add isActive" instead of sceneRecord->setCurrentCameraGameObject
CLOSED: [2018-08-04 Sat 12:14]
//logic


//test



*** DONE wdb
CLOSED: [2018-08-04 Sat 16:58]
//add isActive



fix generate->imgui


run test:
test isActive

test imgui



** DONE add camera api
CLOSED: [2018-08-04 Sat 18:58]

////merge basicCameraView and perspectiveCameraProjection to camera component???


merge to camera group
(camera components)



** DONE add material/meshRenderer api
CLOSED: [2018-08-04 Sat 20:41]



////** TODO increase wheel speed




** DONE add convertWorldToScreen api
CLOSED: [2018-08-04 Sat 22:00]
//logic 


//test


//publish npm



fix position bug:
not /. w?

should be lower(- y)


when distance < , shouldn't see imgui!!!







////** TODO fix imgui image size
adjust by sqrt((x1-x2)^2 + ...)






** DONE fix bug
CLOSED: [2018-08-05 Sun 17:04]

dispose arcball cameraController, loopBody twice



fix direction/point light->isExceedMaxCount: -1




////fix bug:
add camera component;
remove another camera, error



////fix:
dispose material error(if has meshRenderer)




** DONE fix wdb->isActiveCamera
CLOSED: [2018-08-05 Sun 16:28]






//test generate:
//test dispose

//node extras->meshRenderer

//node extras->basicCameraView


//check:
should only active one

////basicCameraViews' count should === cameraProjections count



//run test




** DONE fix arcball cameraController
CLOSED: [2018-08-05 Sun 16:52]
//not bind event when init, initGameObject


////remove warn





*** DONE wdb
CLOSED: [2018-08-05 Sun 16:52]
add isBindEvent 












** DONE fix imgui
CLOSED: [2018-08-05 Sun 19:34]
not serialize


not deserialize




editor



** DONE renderGroup add replaceXxx api
CLOSED: [2018-08-05 Sun 22:13]






** DONE fix bug
CLOSED: [2018-08-06 Mon 12:17]
//no geometry shouldn't render


** DONE fix dispose,add render group bug
CLOSED: [2018-08-06 Mon 16:19]



** DONE remove BoxGeometry, only remain CustomGeometry
CLOSED: [2018-08-06 Mon 18:50]
//remove BoxGeometry


//add createBoxGeometry api


//rename CustomGeometry to Geometry


//apply to editor


** DONE how to use gizp?
CLOSED: [2018-08-08 Wed 18:23]



** TODO add loading progress bar
show loading count/total count?
or loading size/total size?



add imgui control?
show label



////*** TODO image change to uint8array 




*** DONE create 1*1 default texture uint8Array
CLOSED: [2018-08-11 Sat 10:46]



*** DONE new wdb format
CLOSED: [2018-08-14 Tue 09:57]
load one by one

one:
geometry + texture
(first bind default texture; when texture loaded, replace it)





//draft


//logic


//pass compile









*** DONE pass load whole wdb(support none-stream)(pass assemble, generate test)
CLOSED: [2018-08-15 Wed 21:01]

//fix build stream-> chunkByteLength



////put image bufferViews to end


//fix bin buffer data





pass test:
//assemble
//generate



pass run test:
//1.convert glb to wdb->load wdb:
//a.box textured
//b.truck
//c.2CylinderEngine

//d.AlphaBlendModeTest.glb:

test data->index data


//f.Lantern(pbr)

VC.glb ? 


////test sponza.glb







//2.generate wdb->load wdb







*** DONE assemble by stream(support stream) && add stream load api
CLOSED: [2018-08-22 Wed 20:39]



//put chunkLength together(remove chunkType)




//logic


//pass compile




//pass run test:
pass stream load demo






pass test:
test load:

//BoxTextured:
//draw count
//set point data
//loaded image, set source

//pass run test



//Truck:
//draw count
//set point data
//loaded image, set source

//load one/more chunk data:

//add more cases!




//run test:
load local














//AlphaBlendModeTest:
draw count
set point data
loaded image, set source



//pass run test








//pass worker:
BoxTextured
Truck
Alpha


//run test








//run test:
load remote










//BoxTextured + Truck + AlphaBlendModeTest + imgui:
//run test










    

//pass worker


   








//run test:
load remote










*** DONE refactor
CLOSED: [2018-08-22 Wed 21:31]
//duplicate

//split files





*** DONE add sphere geometry(dev branch)
CLOSED: [2018-08-23 Thu 10:20]

publish







////*** TODO update wdb version in wdb->header->version









*** DONE support stream fallback(load whole wdb)(e.g. in firefox)
CLOSED: [2018-08-23 Thu 11:42]



*** DONE support load whole wdb
CLOSED: [2018-08-23 Thu 11:47]



*** DONE fix: truck->use default texture?
CLOSED: [2018-08-23 Thu 17:30]



*** DONE refactor
CLOSED: [2018-08-23 Thu 19:41]

rename AssembleWDBAPI to Whole, Stream ones



////*** TODO Scene1->AlphaBlendModeTest not right?


*** DONE why Scene1 need so long time to load?
CLOSED: [2018-08-23 Thu 19:57]



*** DONE add setSceneGameObject(dev branch)
CLOSED: [2018-08-23 Thu 20:04]





*** DONE optimize
CLOSED: [2018-08-24 Fri 21:10]
**** DONE optimize generate->build image uint8Array
CLOSED: [2018-08-24 Fri 18:12]
need be more small!!!


remove imageBase64Map?


convert glb to wdb





generateWDB accept imageUint8ArrayMap?








**** DONE optimize convert to wdb
CLOSED: [2018-08-24 Fri 20:23]



**** DONE optimize assemble stream wdb
CLOSED: [2018-08-24 Fri 21:10]

**** DONE optimize stream load
CLOSED: [2018-08-24 Fri 21:10]










////*** TODO engine: add disposeGameObjectRemainComponentAssetsdata


*** TODO fix bug: editor->inspector->remove/switch geometry component

use remove(add remove) instead of dispose
(refer to unity)



*** TODO fix engine: dispose scene->camera gameObject, should unbind event and dispose basicCameraView component
add instant dispose gameObject api




*** DONE getXXXGameObjects
CLOSED: [2018-08-26 Sun 12:39]
add getXXXGameObjects(basic material, light material, geometry)???
(return the gameObject arr which share the same one)



handle remove/dispose




*** DONE loopBody support no camera
CLOSED: [2018-08-26 Sun 14:32]
if no vMatrix, not render



test


run test:
no worker


worker



////*** TODO remove geometry add more test cases



*** DONE geometry name
CLOSED: [2018-08-26 Sun 21:17]



*** DONE pass convert test
CLOSED: [2018-08-27 Mon 11:21]



*** DONE update wdb(dev)
CLOSED: [2018-08-27 Mon 14:26]



////*** TODO add load all
////load:
1.data json
2.imgui
3.wdb(support multiple wdbs)



*** DONE add load info
CLOSED: [2018-08-27 Mon 19:56]



//publish wonder-imgui


//load stream wdb


//load whole wdb



//use dom to show loading info


*** DONE pass demo
CLOSED: [2018-08-27 Mon 20:44]
use stream load
//no worker

//worker



//improve effect:
distance
direction light direction



////update online





*** DONE refactor
CLOSED: [2018-08-27 Mon 20:51]
remove log
(remove stream load info)





*** DONE update online demo
CLOSED: [2018-08-27 Mon 21:25]





















** DONE merge stream to dev branch
CLOSED: [2018-08-28 Tue 09:06]



** DONE fix bug:  clone出来的GameObject没有name
CLOSED: [2018-08-28 Tue 10:16]



////** TODO fix bug:  clone gameObject once: result structure wrong!!!???



** DONE not render if not add to scene?
CLOSED: [2018-08-28 Tue 15:36]
meshRenderer add isRender flag?



** DONE fix disposeRemoveGeometry bug
CLOSED: [2018-08-28 Tue 16:46]





** DONE update editor->engine version
CLOSED: [2018-08-29 Wed 08:17]

*** TODO pass compile


*** TODO pass u,i test


*** TODO pass run test




*** TODO check fix bug





** DONE editor: fileReader->type: use extname instead of file.type
CLOSED: [2018-08-29 Wed 08:36]




** TODO fix bug:  import wdb
*** DONE fix bug: 
CLOSED: [2018-08-29 Wed 10:13]
1.import wdb
2.switch other gameObject->geometry to use the wdb->geometry twice


error:
expect sharable component only add to the same gameObject once, but actual not




*** DONE fix bug: 
CLOSED: [2018-08-29 Wed 10:55]
1.import wdb


the imgui become smaller!!!




*** DONE fix bug: 
CLOSED: [2018-08-29 Wed 10:55]
1.import wdb
2.undo


imgui disappear!



*** DONE fix
CLOSED: [2018-08-29 Wed 15:41]

"expect not disposed before, but actual do"





add test


fix



pass test



test perf->assemble




*** DONE fix bug: use remove geometry instead of dispose geometry

CLOSED: [2018-08-29 Wed 16:10]




*** DONE fix bug: 
CLOSED: [2018-08-29 Wed 17:22]
1.import wdb
2.switch other gameObject->geometry to use the wdb->geometry

drawElements warn!!!



*** DONE fix bug: 
CLOSED: [2018-08-29 Wed 17:51]
1.select cube
2.undo
3.import wdb

 "expect isRender is true, but actual is false"




*** DONE push
CLOSED: [2018-08-29 Wed 17:54]










*** DONE import asset wdb-> not set imgui func
CLOSED: [2018-08-29 Wed 19:33]



*** DONE Done should not render wdb(@mickey)
CLOSED: [2018-08-29 Wed 17:33]





** DONE editor: pass all test
CLOSED: [2018-08-29 Wed 20:25]














////** TODO fix bug: camera gameObject add geometry + render group, not render box !!!







** TODO fix scene wdb bug
*** TODO event


*** TODO grid


////why only box has bug?


////*** TODO why gameObject is black?(no light?)



*** DONE need imgui after import
CLOSED: [2018-08-31 Fri 12:47]

//not add grid, edit camera to scene




diff bug:
////change diff when dispose scene



//fix imgui-> edit camera


//engine:
api add getAllGameObjects, hasGameObjectBasicCameraViewComponent

//editor:
refactor GameObjectEngineService
refactor _getSceneCameras




//fix bind event














*** DONE engine: imgui->light imgui position wrong when scale arcball camera(but camera imgui is correct!)
CLOSED: [2018-08-31 Fri 13:16]













*** DONE refactor: extract LoadFileUtils?
CLOSED: [2018-08-31 Fri 13:20]





*** DONE fix re: init ?
CLOSED: [2018-08-31 Fri 13:23]


*** DONE re should set scene wdb->imgui
CLOSED: [2018-08-31 Fri 13:38]



*** DONE re scene wdb->imgui size error!
CLOSED: [2018-08-31 Fri 13:46]



*** DONE change some geometry will cause warn!!!
CLOSED: [2018-08-31 Fri 15:46]


*** DONE refactor MaterialService->checkEditAndRunMaterialWithDiff
CLOSED: [2018-08-31 Fri 15:49]





////*** TODO run after import error





*** DONE second import wdb
CLOSED: [2018-09-03 Mon 11:49]
**** DONE if import the same one, not work
CLOSED: [2018-09-03 Mon 11:24]


fix


refactor



**** DONE cancel cause error
CLOSED: [2018-09-03 Mon 11:49]





*** TODO after first import
***** DONE add box; set position->error
CLOSED: [2018-09-03 Mon 16:03]

add test




**** TODO test add gameObject/asset wdb after import








////** TODO get asset geometry from scene wdb?



*** DONE support undo after import(@mickey)
CLOSED: [2018-09-03 Mon 16:12]



** TODO fix load asset wdb
*** DONE load Scene.wdb error->imgui, event bug
CLOSED: [2018-09-03 Mon 19:42]


//imgui->get all from scene


//fix camera



////re: change gray:



////** TODO fix dispose disposeKeepOrder not dispose bug



////*** TODO load the same one not work



*** DONE 1.remove a after load a;2.load b;3.load a;    b become to a!!!
CLOSED: [2018-09-04 Tue 11:26]





** DONE fix direction light:
CLOSED: [2018-09-03 Mon 21:30]
intensity 1 not work?


point light?


** DONE refactor handleSceneWdb
CLOSED: [2018-09-04 Tue 09:29]






////** TODO fix remove asset wdb after load scene wdb,asset wdb


** DONE fix arcball when run(@mickey)
CLOSED: [2018-09-04 Tue 14:19]
*** TODO change distance should refresh transform inspector
*** TODO shouldn't change transform inspector













** DONE fix arcball(active) when run
CLOSED: [2018-09-04 Tue 16:33]
////*** TODO update ee
update imgui->camera

update inspector instantly


////*** TODO update inspector->arcballCameraController, transform



////*** TODO engine: arcball
   when run:
add new arcball component(with no cameraGroup)

shouldn't affect current active arcball component




** DONE support no camera?(@mickey)
CLOSED: [2018-09-04 Tue 17:12]
support dispose all camera gameObjects

** DONE truck wdb: should has multiple geometrys instead of one(@mickey)
CLOSED: [2018-08-31 Fri 15:53]


** DONE finish test:mainEditorAssetHeder_loadFile_test
CLOSED: [2018-08-30 Thu 13:38]
@mickey












** DONE fix: apply asset wdb(contain camera)->should active its camera?
CLOSED: [2018-09-04 Tue 18:58]
now not active(so not fix)


** TODO Q: script can get editor specific gameObjects(e.g. camera gizmo)? how to handle it?

** TODO demo(verify use one engine state and one canvas+image?or canvas and use canvas.drawImage?)
*** DONE render scene view, game view
CLOSED: [2018-09-05 Wed 20:29]
use render to target render scene view, game view







game view need exclude grid, editCamera







////**** TODO use add job


*** DONE extend job
CLOSED: [2018-09-05 Wed 19:33]
add user job in json
**** DONE user can define job in json, add register job function by js
CLOSED: [2018-09-05 Wed 19:33]






*** TODO fix
**** DONE fix viewport bug!
CLOSED: [2018-09-05 Wed 20:29]





**** DONE fix projection bug
CLOSED: [2018-09-06 Thu 21:10]

***** DONE engine
CLOSED: [2018-09-06 Thu 21:10]
////set aspect when init camera




***** DONE editor
CLOSED: [2018-09-06 Thu 21:10]
fix createCameraGroup




fix resize?
resize is invoked when start?

set all camera projection->aspect when resize



**** DONE set game view->camera->aspect???
CLOSED: [2018-09-06 Thu 21:13]


**** DONE increase offscreen size?
CLOSED: [2018-09-07 Fri 10:36]




////**** TODO fix render worker->render






**** DONE optimize
CLOSED: [2018-09-07 Fri 17:55]
optimize readPixels

not get imageData?


***** DONE change to two views in one canvas instead of use readPixels!!!
CLOSED: [2018-09-07 Fri 17:55]
use scissor







////**** TODO fix game view->viewport?
offscreen size not related to game view canvas size???









////*** TODO loopBody  should render to target


*** DONE when run, trigger both event
CLOSED: [2018-09-08 Sat 16:48]
game view image bind event:
only trigger user event(e.g. user added arcball)(need test user add event)


scene view canvas(engine state) bind event:
only trigger edit event(e.g. edit camera->arcball event)






**** DONE pass test
CLOSED: [2018-09-08 Sat 15:00]
pass u,i test


pass run test



**** DONE switch topic(by mousedown) to switch trigger event
CLOSED: [2018-09-08 Sat 16:49]
add filter when init event->from dom event



**** DONE test arcball event
CLOSED: [2018-09-08 Sat 15:26]






**** DONE test picking
CLOSED: [2018-09-08 Sat 16:31]
test active camera

get pMatrix





*** DONE fix event(demo) and initEvent job(engine job)
CLOSED: [2018-09-08 Sat 16:48]
**** DONE engine->refactor: remove StateDataMainService.unsafeGetStateByFunc,setStateByFunc
CLOSED: [2018-09-08 Sat 16:46]


**** DONE _preventContextMenuEvent not use state
CLOSED: [2018-09-08 Sat 16:48]



////*** TODO point event
scene view: bind dom to trigger scene event



game view: not change



////*** TODO keyboard event

scene view: exec scene dom event



game view: not change


////*** TODO bind scene view->event
point event: event name


keyboard event: event name





////*** TODO should scale point event->mouse position, view size from game view to scene view???







*** TODO make sure that exported package->event should work!




////*** TODO need verify picking: scene view,game view size are different, should picking the target!







*** TODO game view exclude scene view->gizmos





*** TODO import,export




*** TODO redo undo





*** DONE DemoAPI->gl operation use DeviceManagerService
CLOSED: [2018-09-10 Mon 11:05]

////**** TODO DemoAPI->restore scissor test


*** DONE fix gl.viewport->ffi
CLOSED: [2018-09-10 Mon 11:13]
use int instead of float


*** DONE update wonder-webgl
CLOSED: [2018-09-10 Mon 11:13]


////*** TODO DemoAPI: all use API 







*** TODO apply to editor(remain ee, re temporarily)

**** DONE finish render
CLOSED: [2018-09-10 Mon 18:26]

resize need update xxxViewRect


**** DONE add test
CLOSED: [2018-09-11 Tue 20:52]
//pass resize test


prepare job:
////if not set viewRect, not render
not loopBody!

//send uniform for imgui

fix camera:
//fix active bug

//test more data(e.g. aspect)






//fix game view->viewport bug


//fix resize bug





//fix scene view: should show imgui



////add test






//fix game view->viewport













//fix game view: not has grid, edit camera





////fix scene view: arcball distance?




//fix clear color





////refactor gameView test












test more:
//test restore job

//scissor









////refactor






//pass run test



**** DONE fix imgui
CLOSED: [2018-09-11 Tue 19:36]

***** DONE fix game view->imgui: should set different imgui before render scene view and render game view
CLOSED: [2018-09-11 Tue 15:44]

***** DONE add test
CLOSED: [2018-09-11 Tue 15:44]

***** DONE import scene wdb->imgui: use game view imgui function
CLOSED: [2018-09-11 Tue 19:29]
//fix imgui

//fix active


//pass import scene wdb:
u,i test
run test


//remove "controller load scene wdb" test





////***** TODO refactor scene view->imgui
in no worker:
remove custom data








**** DONE run test: pass show inspector
CLOSED: [2018-09-12 Wed 19:17]



**** DONE pass camera->active related test:
CLOSED: [2018-09-13 Thu 16:46]


//active basicCameraView

//add camera group


//remove camera group:
test snapshot

test set last active






//dispose camera gameObject:
test set last active



////unactive all camera:
test snapshot






//test load scene wdb->active



//fix game view->no camera:
load scene wdb->has no active camera
dispose all camera
unactive all camera












pass u,i test



pass run test




**** DONE pass run/stop
CLOSED: [2018-09-13 Thu 19:17]
***** DONE fix
CLOSED: [2018-09-13 Thu 19:14]

////***** TODO active when run/stop





**** DONE finish event
CLOSED: [2018-09-14 Fri 19:04]



***** DONE add test
CLOSED: [2018-09-13 Thu 21:27]

init event job:


refactor





***** DONE pass arcball
CLOSED: [2018-09-14 Fri 18:09]





//run/stop->bind event


//test dispose:
gameObject
camera group
arcballCameraController

//add:
camera group
arcballCameraController



//change active camera(has camera controller) should unbind previous one and bind current one:
remove
not active/active






////pass load scene wdb->bind test

***** DONE event->loopBody
CLOSED: [2018-09-14 Fri 19:03]







**** DONE test init editor job
CLOSED: [2018-09-14 Fri 19:44]







**** DONE fix import
CLOSED: [2018-09-14 Fri 21:10]
***** DONE pass import scene wdb
CLOSED: [2018-09-14 Fri 20:45]
add snapshot test


***** DONE pass import/remove asset wdb
CLOSED: [2018-09-14 Fri 21:10]




**** DONE pass undo/redo
CLOSED: [2018-09-14 Fri 21:21]





**** DONE fix: bind warning
CLOSED: [2018-09-15 Sat 08:42]

////**** TODO fix: should show info in console

**** DONE fix: change geometry-> remove "new geometry"?
CLOSED: [2018-09-15 Sat 09:20]



**** DONE refactor MainEditorSceneTool
CLOSED: [2018-09-15 Sat 09:23]



**** DONE pass scene tree
CLOSED: [2018-09-15 Sat 11:09]



**** DONE pass inspector
CLOSED: [2018-09-15 Sat 11:09]



**** DONE pass header
CLOSED: [2018-09-15 Sat 11:09]




**** DONE pass asset
CLOSED: [2018-09-15 Sat 11:10]






////**** TODO refactor: move controller tests

////**** TODO refactor: move stateTuple->logic service to state service


**** DONE refactor: clean TODOs
CLOSED: [2018-09-15 Sat 11:30]





**** DONE push to dev(merge @mickey)
CLOSED: [2018-09-15 Sat 14:26]




** DONE fix drag arcball when run: should update transform inspector
CLOSED: [2018-09-15 Sat 15:32]




** pass header->export test(@mickey)





////** TODO fix bug: not redo/undo resize(@mickey)


** DONE fix import scene wdb bug:
CLOSED: [2018-09-18 Tue 19:29]
*** DONE if wdb has no light, scene should has no light after import!!!
CLOSED: [2018-09-18 Tue 16:10]

should change glsl->light count





////*** TODO import wonder-tool-converter -> dest/test.wdb: shouldn't error!!!(from zhou tao, no texture and joint)


////** TODO fix point light: export wdb with point light; import wdb; click point light in scene tree; shouldn't error!!!



** DONE fix bug: resize->should update "no camera"
CLOSED: [2018-09-18 Tue 20:29]









** DONE check export wdb && import wdb
CLOSED: [2018-09-20 Thu 11:19]
////*** TODO fix: 1. export scene package(has only one BoxTextured); 2.import package; shouldn't error! should has texture!!!



////*** TODO fix:1. import package2; 2. import package3; select direction light;  error!


////*** TODO export scene wdb->imgui: use game view imgui function


*** DONE fix import asset wdb
CLOSED: [2018-09-20 Thu 10:37]
**** DONE wdb:direction light wdb should re-init
CLOSED: [2018-09-19 Wed 21:13]
reinit: clear shader cache

not init when load
init(not init material) and reinit when drag



             //test1:loaded gameObject->shaderSource->light count === 2
             //test2:origin gameObject->reinit->shaderSource->light count === 2
             //test2:dispose origin gameObject->new gameObject after drag->shaderSource->light count === 2



//fix reInitAllMaterials:
clear shader cache
reInit scene->all materials






    /* TODO need refactor tests */

fix: 
direction light:
no worker:
create
define light count
send



max count:
isMaxCount
create
define light count




test:
clone
dispose



worker




point light:
no worker


worker






light->index


light->count










**** DONE fix: 1.import DirectionPointLightsAndBox.wdb; 2. dispose point light;   error!!!
CLOSED: [2018-09-20 Thu 10:37]











////*** TODO fix bind?
1.bind active camera->arcballCameraController(if has) event 
2.export
3.unbind



////*** TODO fix imgui?







/*
////** TODO event 


////** TODO script 


////** TODO inspector 

*/












** DONE fix apply texture bug
CLOSED: [2018-09-25 Tue 19:26]
*** DONE fix apply texture(export,import,apply) bug
CLOSED: [2018-09-21 Fri 10:51]




////*** TODO 1.import truck wdb;2.apply texture to one wheel; another wheel shouldn't be affected! 



*** DONE 1.import truck wdb;2.wheel should show texture!
CLOSED: [2018-09-21 Fri 10:53]





*** DONE dispose texture asset
CLOSED: [2018-09-25 Tue 19:26]
**** DONE dispose texture asset->need remove in engine
CLOSED: [2018-09-22 Sat 12:38]
need add "get texture->all basic materials/light materials who use it"



update wonder.js(need public)


////**** TODO fix 1.load asset wdb->drag: first one use the texture asset; the second one shouldn't has it!!!




**** DONE fix 1.load asset wdb->drag: draged ones use the same texture asset; 2.remove texture asset;  should remove from all draged ones!!!
CLOSED: [2018-09-25 Tue 19:26]
engine:
//material:get gameObjects

//add remove material logic


//pass compile



//test:
//pass test


get logic:



remove logic:
remove material

api->batchDisposeBasicMaterial,lightxxx




//pass worker








editor:
//fix: use getGameObjects


//fix: use remove material instead of dispose material


//pass compile



test:
//pass all tests

//u,i test

//run test



//publish wonder.js npm(update it in wonder-editor)



** DONE fix(material): not judge geometry, add map even though has no geometry
CLOSED: [2018-09-26 Wed 11:39]

not judge texCoords?


** DONE refactor
CLOSED: [2018-09-26 Wed 11:55]







** DONE fix setting.json: add buffer data(should big enough)
CLOSED: [2018-09-26 Wed 12:16]



** DONE fix replace material type bug: use remove instead of dispose old material
CLOSED: [2018-09-26 Wed 15:32]



////** TODO fix apply material and change asset->material->type


extract shader module?
so that change type shouldn't affect gameObject who share the material!!!???



////** TODO feat: add get material->gameObjects (refer to geometry)???















////** TODO more asset



material
geometry
imgui script
script
...



different gameObject can use the same asset
(share the asset)



asset name should be unique!



basicMaterial,lightMaterial all has one name: material name
api: getMaterialName/setMaterialName








////*** TODO rethink meshRender and material
remove material?
remove meshRender?


refer to unity!!!


////*** TODO only has material component, which has basic/light shader




////** TODO engine: support none material
(can has meshRenderer)





////** TODO editor: support add geometry component(default is none)
////*** TODO engine: support add geometry component with no point data
can render, but if has no vertices,/..., not send corresponding attributes???


////** TODO dispose geometry/material
not dispose geometry/material data if no gameObject use






** DONE fix bug
CLOSED: [2018-09-26 Wed 17:35]
////*** TODO engine: redo-undo bug
   operation:
   /*
   remove renderGroup
   undo
   change light material to basic material
   */
   

select gameObject
undo
   change light material to basic material
   

   description:
   draw mode change to points(should be triangles)
   (and switch draw mode, not affect)
*** DONE engine: create light
CLOSED: [2018-09-26 Wed 17:32]

////**** TODO engine: create < 4(should <= 4)

**** DONE change direction light to point light: when > 4 lights, error
CLOSED: [2018-09-26 Wed 17:32]


////*** TODO engine
1.create empty gameObject
2.add one component
3.run
4.dispose the component
5.dispose gameObject
6.stop


gameObject disappear!

if then add one gameObject, the gameObject appear again!





////*** TODO engine: MeshRendererAPI->getMeshRendererDrawMode should return type








** DONE export .zip instead of .wonderpackage format
CLOSED: [2018-09-26 Wed 17:45]


** DONE change license
CLOSED: [2018-09-26 Wed 18:09]





** DONE fix: 1.export package(has one cube); 2.import it;3.drag texture to it;4.remove texture asset; error!!!
CLOSED: [2018-09-27 Thu 18:03]




** DONE fix: when run and has arcballCameraController and is trigger gameView event, transform inspector can't operate!!!
CLOSED: [2018-09-28 Fri 09:03]






** DONE fix: apply texture bug
CLOSED: [2018-09-28 Fri 15:59]
1.load texture asset
2.dispose one box
3.apply texture to scene->box->mesh
4.undo
5.apply texture to scene->box->mesh


the box->texture not work!!!



1.load scene.wdb
2.load texture asset
3.apply texture to scene->box->mesh
4.apply texture to box(default scene)


the box->texture not work!!!










** TODO test import/export package
*** DONE finish export->html,js
CLOSED: [2018-09-28 Fri 11:47]


*** TODO test run in local by exported package

**** DONE fix bind
CLOSED: [2018-09-28 Fri 18:29]
1.bind active camera->arcballCameraController(if has) event 
2.export


bind when run in local



////** TODO fix: 1.run;2.click console; error!!!(@mickey)




test


**** DONE add more export package test cases
CLOSED: [2018-09-28 Fri 18:29]


**** DONE pass all u,i tests
CLOSED: [2018-09-29 Sat 09:49]


////**** TODO fix viewport
load scene wdb
active scene camera
export

viewport bug

aspect bug???

refer to MainEditor.re:
    StateEngineService.unsafeGetState()
    |> PerspectiveCameraProjectionEngineService.markAllPerspectiveCameraProjectionsDirty
    |> DeviceManagerEngineService.setViewport((
         0,
         0,
         width |> NumberType.convertFloatToInt,
         height |> NumberType.convertFloatToInt,
       ))
    |> DirectorEngineService.loopBody(0.)
    |> StateEngineService.setState
    |> ignore;
  };





////**** TODO fix generate file too big

**** DONE update Scene.wdb(editor->test->res)
CLOSED: [2018-09-29 Sat 12:00]
pass load scene wdb test


*** DONE refactor: rename data/ to config/
CLOSED: [2018-10-02 Tue 10:25]


*** DONE refactor:  rename _loadAndWriteDataData, ... to _xxxSingleXXX
CLOSED: [2018-10-02 Tue 10:25]





*** DONE refactor: remove name
CLOSED: [2018-10-08 Mon 16:49]



*** DONE test: pass u,i tests
CLOSED: [2018-10-08 Mon 16:49]



*** DONE pass add material
CLOSED: [2018-10-08 Mon 17:31]


*** DONE feat: show material inspector
CLOSED: [2018-10-08 Mon 17:31]



////*** TODO feat: remove render array


////*** TODO feat: remove "render group" related logic






*** DONE feat: add material asset
CLOSED: [2018-10-17 Wed 15:02]
**** DONE feat: edit material inspector
CLOSED: [2018-10-10 Wed 10:18]
***** DONE fix:select type
CLOSED: [2018-10-09 Tue 20:37]



***** DONE fix:set map
CLOSED: [2018-10-10 Wed 10:18]




**** DONE fix replaceRenderGroupByMaterialType
CLOSED: [2018-10-09 Tue 19:13]
***** DONE only re-set meshRenderer->renderArray, not replace meshRenderer
CLOSED: [2018-10-09 Tue 19:13]



**** DONE feat:select material in renderGroup 
CLOSED: [2018-10-10 Wed 17:07]
***** DONE modal select material
CLOSED: [2018-10-10 Wed 12:34]





***** DONE default material (can't change)
CLOSED: [2018-10-10 Wed 15:57]


***** DONE fix: select material can has all type materials
CLOSED: [2018-10-10 Wed 16:34]



***** DONE default scene should use default light material
CLOSED: [2018-10-10 Wed 16:54]

***** DONE add gameObject,material should use default light material
CLOSED: [2018-10-10 Wed 16:54]


***** DONE rename material name: shouldn't equal default material name!!!
CLOSED: [2018-10-10 Wed 17:07]



**** DONE refactor: move materialRecord to assetRecord->materialData
CLOSED: [2018-10-10 Wed 17:19]



**** DONE fix: 1:add material;2.select material  to added one; should only select added one, not select default basic material!!!
CLOSED: [2018-10-10 Wed 17:26]


**** DONE test
CLOSED: [2018-10-17 Wed 15:02]
***** DONE refactor: trigger function instead of trigger event
CLOSED: [2018-10-13 Sat 16:49]
****** DONE finish
CLOSED: [2018-10-13 Sat 12:32]

****** DONE refactor: remove unused code
CLOSED: [2018-10-13 Sat 12:32]



****** DONE push
CLOSED: [2018-10-13 Sat 16:48]

widge->
isWidge->







remove _engineState:

AssetTreeEditorService:

let isTreeNodeRelationError =
    (targetId, removedId, (editorState, _engineState)) =>
  AssetUtils.isIdEqual(targetId, removedId) ?
    true :
    _isRemovedTreeNodeBeTargetParent(
      targetId,
      editorState
      |> AssetTreeRootEditorService.unsafeGetAssetTreeRoot
      |> AssetUtils.getSpecificTreeNodeById(removedId)
      |> OptionService.unsafeGet,
    ) ?
      true :
      _isTargetTreeNodeBeRemovedParent(
        editorState
        |> AssetTreeRootEditorService.unsafeGetAssetTreeRoot
        |> AssetUtils.getSpecificTreeNodeById(targetId)
        |> OptionService.unsafeGet,
        removedId,
      )
      || _isTargetTreeNodeHasSameNameChild(targetId, removedId, editorState);










***** DONE pass u,i test
CLOSED: [2018-10-13 Sat 16:57]


***** DONE test add material
CLOSED: [2018-10-16 Tue 12:21]

***** DONE test edit material inspector
CLOSED: [2018-10-17 Wed 15:02]






***** DONE test change material
CLOSED: [2018-10-17 Wed 15:02]

////****** TODO fix and test: material inspector: 1.change type to basic; 2.select default basic material;   error!!!


****** DONE fix and test: material inspector:  1.select added material; 2.change material inspector->type to basic; the added material should change type!!!
CLOSED: [2018-10-16 Tue 16:00]


****** DONE fix and test: material inspector:  1.select added material; 2.change material asset->type to basic; the added material should change type!!!
CLOSED: [2018-10-17 Wed 08:50]


****** DONE fix and test: update material node id map
CLOSED: [2018-10-17 Wed 08:50]


****** DONE fix and test: 1.remove added material;  
CLOSED: [2018-10-17 Wed 10:38]
should remove from select material;
any use this material's gameObject should change to use default one;


////****** TODO fix and test: set diffuseMap


****** DONE fix and test: 1.remove texture(not drag before) from material assets;2.material asset->map should be removed
CLOSED: [2018-10-17 Wed 14:39]



***** DONE add redo-undo tests
CLOSED: [2018-10-17 Wed 11:21]





***** DONE test rename material name
CLOSED: [2018-10-17 Wed 15:00]
test "rename material name: shouldn't equal default material name!!!"



////*** TODO feat: remove texture from material assets


***** DONE refactor: rename parentNodeId to parentFolderNodeId
CLOSED: [2018-10-17 Wed 15:01]




*** DONE remove JSON asset type
CLOSED: [2018-10-17 Wed 15:37]

*** DONE refactor: remove assetnodeType-> postfix(material, texture, wdb, ...)
CLOSED: [2018-10-17 Wed 15:45]


*** DONE refactor: remove diffMap
CLOSED: [2018-10-17 Wed 15:47]









*** DONE test scale ui(with @mickey)
CLOSED: [2018-10-17 Wed 16:12]



*** DONE fix: rename material asset name twice with the same name
CLOSED: [2018-10-17 Wed 17:19]







*** DONE refactor: remove textureIndex, textureArray
CLOSED: [2018-10-22 Mon 11:53]




*** DONE feat: export .asb(export package)
CLOSED: [2018-10-30 Tue 11:52]
texture
material
wdb


add version(editor)


**** TODO editor: use imageUint8ArrayDataMap  instead of imageBase64Map(add after add generateWDB)
editor: 
asset->texture:
should set uint8Array









*** DONE feat: import package, relate gameObject and assets
CLOSED: [2018-10-30 Tue 11:52]
fix import!(now import package not work!)



*** DONE write logic
CLOSED: [2018-10-23 Tue 11:50]


*** DONE pass compile
CLOSED: [2018-10-23 Tue 18:03]




*** DONE u,i test
CLOSED: [2018-10-30 Tue 11:52]
//pass test


add main test:
material: 
    //src
    //basic type

    two materials->name:
//a.change type->should ensure name
//b.one textures+one materials:

//pass wonder.js tests

//fix stream

//pass test


//publish wonder.js version
////update wonder.js->wdbs
//pass tests

//update wonder.js version in wonder-editor



//remove Scene.wdb
//remove test/res/wdb/*.wdb

////e2e->wdb use test/res/wdb


//c.two textures+two materials:




//commit!


//pass all tests


//push





//d.basic material + light material(with map):
map not related!!!








//geometry: 
should has one cube!


wonder-default-cube/sphere






wdb: 






//test "export/import package"->"relate scene->wdb with wdb assets->geometrys"



//test "export/import package"->"relate asset->wdb with default geometrys"



//test two wdbs






//fix wdb + material + texture bug





//fix: during import bug





//fix: wdb name duplicate?(path duplicate???)




//run test:
test more wdbs





////add more tests





*** DONE remove basicMaterial->map
CLOSED: [2018-10-27 Sat 19:29]

//commit





*** DONE run test
CLOSED: [2018-10-30 Tue 11:52]






*** DONE refactor
CLOSED: [2018-10-30 Tue 12:17]
remove prints













////*** DONE enhance image equal logic
CLOSED: [2018-10-30 Tue 19:10]

optimize judge base64,uint8Array equal

finish logic


commit wonder.js
update wonder.js version


pass test




////*** TODO limit texture name



*** DONE feat: get materials from loaded asset wdb
CLOSED: [2018-11-01 Thu 18:53]


**** DONE judge has material asset?
CLOSED: [2018-11-01 Thu 18:53]

*** DONE feat: get textures from loaded asset wdb
CLOSED: [2018-11-01 Thu 18:53]


**** DONE judge has texture asset?(judge base64,uint8Array data?)
CLOSED: [2018-11-01 Thu 18:53]








//finish logic


//pass compile



*** DONE fix test->drag asset tree
CLOSED: [2018-11-02 Fri 09:25]




*** DONE feat:add redo-undo import package
CLOSED: [2018-11-02 Fri 10:20]





*** DONE u,i test
CLOSED: [2018-11-02 Fri 13:01]
**** DONE test load wdb asset
CLOSED: [2018-11-02 Fri 13:01]


***** DONE test no material and no texture assets case
CLOSED: [2018-11-02 Fri 13:01]

**** DONE test export/import package
CLOSED: [2018-11-02 Fri 12:48]
***** TODO test "relate asset->wdb with material asset"


*** DONE fix(extract): truck wdb->remove wheels->texture asset, wdb gameObject->wheels->texture should be removed from material!
CLOSED: [2018-11-02 Fri 12:10]
test:
two materials use the same texture t1;
remove t1;



*** DONE fix(extract): MatBed material miss
CLOSED: [2018-11-02 Fri 12:10]


*** DONE fix: image data change?geometry change?
CLOSED: [2018-11-02 Fri 12:48]
keep texture data not change during export,import package




*** DONE run test
CLOSED: [2018-11-02 Fri 12:48]





*** DONE refactor
CLOSED: [2018-11-02 Fri 14:04]
duplicate


too long





////*** TODO optimize: select asset so slow(after load wdb asset)!!!
log???







*** DONE update online demo
CLOSED: [2018-11-02 Fri 14:22]





*** DONE feat: wpk add version
CLOSED: [2018-11-03 Sat 11:43]









*** DONE feat: add export .wdb
CLOSED: [2018-11-03 Sat 11:57]



*** DONE fix: "set export package name" not work!
CLOSED: [2018-11-03 Sat 12:02]





*** DONE fix: load scene wdb asset->light
CLOSED: [2018-11-03 Sat 21:31]
**** TODO fix



**** TODO fix: 1.export wpk;2.import wpk;  exceed light count








*** DONE fix wonder.js:
CLOSED: [2018-11-03 Sat 21:22]
**** DONE TypeArrayService: add check bound
CLOSED: [2018-11-03 Sat 18:46]



////**** TODO test
      ~getAttribLocation=createEmptyStub(refJsObjToSandbox(sandbox^))
                         |> returns(-1),
      ~getUniformLocation=createEmptyStub(refJsObjToSandbox(sandbox^))
                          |> returns(-1),




**** DONE add buffer->direction light/point light count
CLOSED: [2018-11-03 Sat 21:22]


*** DONE feat: drag wdb should add check
CLOSED: [2018-11-03 Sat 22:23]
**** TODO check max light count


*** fix: import package should add check
**** TODO check max light count






*** feat: add export/import .asb












*** DONE feat: add publish->local zip
CLOSED: [2018-11-04 Sun 10:46]
**** DONE remove assets
CLOSED: [2018-11-04 Sun 10:46]



**** DONE update export
CLOSED: [2018-11-04 Sun 10:46]



*** DONE header add "publish"->"local package"
CLOSED: [2018-11-04 Sun 10:46]











*** DONE test
CLOSED: [2018-11-04 Sun 10:46]




*** optimize
import scene wdb is too slow!??

















*** DONE refactor: rename textureIndex, materialComponent to texture, material
CLOSED: [2018-10-09 Tue 11:33]






















*** DONE fix stop->setUint32_1: expect not exceed bound
CLOSED: [2018-11-04 Sun 11:33]




*** DONE fix:load wdb
CLOSED: [2018-11-04 Sun 20:07]




*** DONE fix load asset: support same name
CLOSED: [2018-11-05 Mon 17:13]

https://stackoverflow.com/questions/26634616/filereader-upload-same-file-again-not-working



*** DONE fix:1.load truck wdb;  shouldn't has "New Geometry"!!!
CLOSED: [2018-11-05 Mon 19:52]
**** DONE fix engine->assemble???
CLOSED: [2018-11-05 Mon 19:52]

**** DONE fix geometry asset
CLOSED: [2018-11-05 Mon 19:52]



*** DONE pass tests
CLOSED: [2018-11-05 Mon 20:12]


*** DONE fix:the asset can't has the same name
CLOSED: [2018-11-05 Mon 20:23]





*** DONE feat: change "select geometry" and "select material" show order 
CLOSED: [2018-11-05 Mon 20:33]


*** fix:truck remove material bug(two truck share the same material?)



*** DONE finish asset->wdb, geometry related logic
CLOSED: [2018-11-04 Sun 20:59]

**** DONE pass removeNode test
CLOSED: [2018-11-04 Sun 16:03]


**** DONE fix:1.dispose wdb asset;  shouldn't remove cloned ones
CLOSED: [2018-11-04 Sun 17:44]


**** DONE fix:1.dispose wdb asset;  remove cloned ones->geometry component
CLOSED: [2018-11-04 Sun 17:44]


**** DONE fix:1.dispose wdb asset; select geometry should update!!!
CLOSED: [2018-11-04 Sun 17:44]





**** DONE fix:1.dispose wdb asset;  should dispose the wdb gameObject(remove material)
CLOSED: [2018-11-04 Sun 20:59]

////**** TODO fix:1.dispose gameObject; select geometry should update!!!





*** DONE feat: load asset not multiple
CLOSED: [2018-11-05 Mon 20:38]


*** dispose material, texture asset


////**** TODO dispose asset->texture: should remove from imageUint8ArrayMap



////**** TODO test remove texture
////***** TODO texture order

////***** TODO fix: 1.load t1,t2;  remove and add? 2.drag t1,t2 to 2 boxes;3.export;4.import;     only show half!!!???








*** fix:should dispose all current assets when import package(e.g. so basicSourceTexture->index should keep small)
transform, basicSourceTexture





*** DONE refactor AssetUtils
CLOSED: [2018-11-05 Mon 21:55]
**** DONE split
CLOSED: [2018-11-05 Mon 21:55]

**** DONE refactor deep remove: pass engineState
CLOSED: [2018-11-05 Mon 21:03]



*** DONE refactor service:rename state->editor->asset service
CLOSED: [2018-11-05 Mon 22:12]




*** DONE fix bug
CLOSED: [2018-10-05 Fri 11:35]
**** DONE import package with two texture assets: only has one!
CLOSED: [2018-10-04 Thu 11:46]





////**** TODO fix: 1.load t1,t2;2.drag t1,t2 to 2 boxes;3.export;4.import;     2 boxes all use t1!!!(jpg,png)
**** DONE fix: 1.load t1(jpg);2.drag t1 to 1 boxes;3.export;4.import;     
CLOSED: [2018-10-05 Fri 11:35]

images->mimeType wrong


_convert->images: null(convertStream





engine:
//fix toDataURL








////**** TODO fix: test/ jpg image only show half!!!





















////** TODO update wonder-bs-jest











** DONE optimize: not loopBody when event trigger
CLOSED: [2018-11-06 Tue 16:27]





** DONE improve: expand sceneTree->arrow judge zone(@mickey)
CLOSED: [2018-11-06 Tue 16:27]



** DONE not drag wdb,gameObject to dragTree
CLOSED: [2018-11-07 Wed 11:44]


** DONE feat(sceneTree): add scene as root
CLOSED: [2018-11-07 Wed 12:07]


** DONE fix: drag wdb to folder
CLOSED: [2018-11-07 Wed 12:36]


** DONE support drag to scenetree->treeNode
CLOSED: [2018-11-07 Wed 14:09]


** DONE test
CLOSED: [2018-11-07 Wed 14:09]
////drag gameObject to Scene
////drag wdb to Scene

drag wdb to sceneTree node


** DONE fix apply asset wdb-> drag zone
CLOSED: [2018-11-07 Wed 14:09]
*** DONE support drag to scene view
CLOSED: [2018-11-07 Wed 11:34]


*** DONE redo-undo
CLOSED: [2018-11-07 Wed 11:34]

*** DONE test
CLOSED: [2018-11-07 Wed 11:34]


*** DONE refactor: extract MainEditorCanvas ui
CLOSED: [2018-11-07 Wed 11:34]


** DONE fix apply asset wdb: should remain other applied wdb->folded
CLOSED: [2018-11-07 Wed 17:22]


** DONE feat(sceneTree): default should be folded
CLOSED: [2018-11-07 Wed 17:31]





** DONE fix import package/scene wdb: scenetree,asset tree should all be->folded
CLOSED: [2018-11-07 Wed 17:58]



** DONE fix ui: 1.drag wdb to scene tree->check 2.warn(light count)  scene tree shouldn't be drag state!
CLOSED: [2018-11-07 Wed 18:03]





** DONE fix select scene tree->Scene
CLOSED: [2018-11-07 Wed 17:57]



** DONE fix: asset tree->isShowChildren refer to sceneTree
CLOSED: [2018-11-07 Wed 19:18]




** DONE refactor: rename export/ to publish/
CLOSED: [2018-11-08 Thu 09:18]











** DONE optimize drag wdb to scene
CLOSED: [2018-11-08 Thu 09:42]
more and more slower when already drag much wdbs
(use WonderPackage 27 to test)



** DONE add isDebug
CLOSED: [2018-11-08 Thu 10:46]
*** DONE production->editor->isDebug should be false
CLOSED: [2018-11-08 Thu 10:46]


*** DONE publish->engine->isDebug should be false
CLOSED: [2018-11-08 Thu 10:46]




** DONE optimize reInit lightMaterials
CLOSED: [2018-11-08 Thu 13:13]








////** fix redo-undo->dispose gameObject: should only one step, but actually two steps!


** DONE fix: texture, material asset inspector: 1.change name; 2.click view;   name shouldn't restore!!!
CLOSED: [2018-11-08 Thu 16:30]


** DONE fix: set texture inspector->wrap,filter not work(engine)???
CLOSED: [2018-11-08 Thu 18:10]
need re-update





** DONE fix: texture inspector: limit wrapS,wrapT, magFilter, minFilter range(get from editor)
CLOSED: [2018-11-09 Fri 08:23]







** DONE fix: use WonderScene (13): add 4; export,import->light count
CLOSED: [2018-11-09 Fri 10:19]
















** DONE optimize: optimie MainEditorAssetChildrenNode->render->texture
CLOSED: [2018-11-09 Fri 10:56]
fix: use WonderScene (13): select asset->texture too slow;  






** DONE fix: loading
CLOSED: [2018-11-09 Fri 12:06]
*** TODO for stream loading: should show scene when loading


*** TODO for whole loading: should not show scene when loading(keep current)












** DONE fix bug: transform->rotation:direction light x:-45  y:180 z:0; loop;  rotation is change!!!
CLOSED: [2018-11-10 Sat 09:30]


playcanvas also has this problem:
https://forum.playcanvas.com/t/setting-localeulerangle-to-180-but-when-getting-it-is-a-different-number/3506






** fix: local zip: viewport is bigger then game view
not bug.









** DONE refactor: extract MainEditorSceneTreeBody
CLOSED: [2018-11-10 Sat 19:12]



** DONE fix: console
CLOSED: [2018-11-12 Mon 11:03]
*** DONE fix console->"if warn in MainEditorBottomComponents ui, will trigger recursive warn"
CLOSED: [2018-11-10 Sat 12:55]


*** DONE write console test
CLOSED: [2018-11-10 Sat 19:00]

*** DONE pass all tests
CLOSED: [2018-11-10 Sat 19:03]


*** DONE error should show message
CLOSED: [2018-11-10 Sat 20:01]
e.g.  AssetHeaderUtils->_handleSpecificFuncByTypeAsync

**** DONE fix load asset: if not wdb/image,  should give error message
CLOSED: [2018-11-10 Sat 20:01]





////*** TODO fix trace in firefox





*** DONE refactor: ConsoleUtils: use editorState instead of root
CLOSED: [2018-11-10 Sat 20:01]


*** DONE fix: warn->rename not count?
CLOSED: [2018-11-10 Sat 20:34]


*** DONE fix: relation error->warn: only trigger when drop
CLOSED: [2018-11-10 Sat 20:42]





*** DONE fix: red circle should include all infos?
CLOSED: [2018-11-10 Sat 20:45]

*** DONE fix: can't see the whole last console info
CLOSED: [2018-11-10 Sat 21:40]


*** DONE fix error info format:
CLOSED: [2018-11-10 Sat 22:10]
"\n Error:\n\n title\n handleSpecificFuncByType\n\n description\n the load file type is error\n\n reason\n \n\n solution\n \n\n params\n \n\n "

use newline;
...



*** support chinese info



*** DONE feat: simplify error,fatal message
CLOSED: [2018-11-10 Sat 22:39]



*** fix: red circle: warn by ConsoleUtils.warn should add one count!!!(e.g. max light count limit)



*** DONE fix: ui->bottom->projection,console button is too wide(and need align center)
CLOSED: [2018-11-10 Sat 21:40]



*** DONE if info is too long, should show align roll bar? or break line?
CLOSED: [2018-11-10 Sat 21:40]




*** DONE fix: remove unused trace stack info
CLOSED: [2018-11-10 Sat 23:12]







*** DONE fix: if no unread message, not show unread count
CLOSED: [2018-11-11 Sun 07:13]





*** DONE use error instead of fatal in editor
CLOSED: [2018-11-11 Sun 07:53]






*** DONE all should use ConsoleUtils
CLOSED: [2018-11-11 Sun 08:07]










*** DONE feat: add debug, info icon(@mickey)
CLOSED: [2018-11-12 Mon 10:58]

*** DONE feat: remove message->type info
CLOSED: [2018-11-12 Mon 11:03]



** DONE refactor: rename handleEngineState
CLOSED: [2018-11-11 Sun 08:08]

////** TODO fix: loading(editor, publish): remove animate(show name)






** DONE optimize
CLOSED: [2018-11-12 Mon 10:33]
*** DONE optimize export 
CLOSED: [2018-11-12 Mon 10:14]
**** TODO optimize first export 
////optimize write buffer


////optimize convert base64 to uint8Array



**** DONE optimize second export (add cache)
CLOSED: [2018-11-12 Mon 10:14]

test

*** optimize import 






** fix:sceneTree->cloned wdb order change!




** DONE refactor(editor): unify cube and box
CLOSED: [2018-11-12 Mon 10:41]
*** DONE refactor: rename "Box" to "Cube"
CLOSED: [2018-11-12 Mon 10:41]






** DONE fix: 1.change to basic material type; 2.name shouldn't change
CLOSED: [2018-11-12 Mon 11:40]


** DONE fix: 1.change name;2.change to basic material type; 3.name shouldn't change
CLOSED: [2018-11-12 Mon 11:40]


** DONE test: MainEditorConsole_test add debug case
CLOSED: [2018-11-12 Mon 11:42]




** DONE fix: ui
CLOSED: [2018-11-12 Mon 13:14]




*** DONE refactor: rename material inspector->"shader" to "type"
CLOSED: [2018-11-12 Mon 11:08]



*** DONE fix: header css
**** DONE fix: ui->edit-> show problem
CLOSED: [2018-11-12 Mon 12:04]


**** DONE fix: ui->publish: need wide!
CLOSED: [2018-11-12 Mon 12:04]



*** DONE fix: modal css
CLOSED: [2018-11-12 Mon 12:18]



*** DONE fix: ui->scene tree: 1.open chrome panel;2.close it;  shouldn't show roll bar!!!
CLOSED: [2018-11-12 Mon 13:14]






















////** fix: transform inspector: 1.selection x; 2.keep mousedown to game view, scene view;   selection cancel!!!


















** fix: path not duplicate should add contract check when import?(shouldn't be duplicate?)








** DONE fix react-dom.development.js:512 Warning: Can't call setState (or forceUpdate) on an unmounted component. 
CLOSED: [2018-11-12 Mon 18:02]



































** DONE design logo, icon
CLOSED: [2018-10-02 Tue 10:47]


** DONE loading should show logo
CLOSED: [2018-10-02 Tue 12:41]


pass test


** DONE editor add loading
CLOSED: [2018-10-02 Tue 12:48]



** DONE fix: pass render worker
CLOSED: [2018-10-02 Tue 18:23]


** DONE update online with icon, logo
CLOSED: [2018-10-02 Tue 18:55]

//update wdb

update editor, engine


fix title to wonder technology


update demo(with logo)





** DONE feat:separate material, shader(so only need replace shader, no need to copy material data to new material!)
CLOSED: [2018-10-01 Mon 18:53]


////pass material type

//add test case


//add "remove map"

//publish wonder.js version


//finish wonder-editor changes






** DONE improve drag sceneTreeNode/assetTree node
CLOSED: [2018-11-12 Mon 23:04]
description
1.drag over node1 to node2;
2.drag move left and right over node2(trigger drag leave and enter);


can't drag drop into node2!!!



*** DONE refactor: remove drag ul
CLOSED: [2018-11-12 Mon 23:04]





** fix: pass run in firefox
(not support firefox in editor!!!)

*** DONE scene tree roll bar
CLOSED: [2018-11-12 Mon 20:06]
*** TODO can't drag wdb asset to scene tree
*** TODO ......



** check: didMount order(refactor "none"?)






** DONE fix: tree->overflow x
CLOSED: [2018-11-13 Tue 09:30]




** DONE feat:asset wdb
CLOSED: [2018-11-13 Tue 10:19]
*** DONE add "convert glb to wdb"
CLOSED: [2018-11-13 Tue 10:19]


*** DONE console error
CLOSED: [2018-11-13 Tue 10:19]


*** add "convert gltf to glb to wdb"?











** DONE fix: sceneTree: can't click when click near border
CLOSED: [2018-11-13 Tue 10:29]





** DONE fix: import 59 package
CLOSED: [2018-11-13 Tue 10:57]


** TODO optimize: (59)
*** DONE run
CLOSED: [2018-11-13 Tue 12:49]

*** DONE event
CLOSED: [2018-11-13 Tue 12:49]


*** DONE stop
CLOSED: [2018-11-13 Tue 12:49]


*** DONE sceneTree
CLOSED: [2018-11-13 Tue 18:40]

*** DONE assetTree
CLOSED: [2018-11-13 Tue 18:40]


*** DONE import package
CLOSED: [2018-11-14 Wed 21:42]
**** DONE optimize relate
CLOSED: [2018-11-13 Tue 22:03]

**** DONE optimize dispose assets
CLOSED: [2018-11-14 Wed 21:42]

engine add api:
dispose image->texture->material->geometry

dispose asset node map whole instead one by one

editor:
add "get geometry assets" function







//pass tests!!!




***** DONE test:add more geometry test cases
CLOSED: [2018-11-14 Wed 16:15]





***** TODO add dispose material component


***** TODO test:add dispose editor state cases(e.g. node Map)




***** TODO test:add more material test cases
//test: add show select material group test case!
test: material has no gameObject


////**** TODO optimize refresh?


** DONE fix: 1.import package 61;2.remove wdb;3.undo;   not work!!!
CLOSED: [2018-11-15 Thu 09:57]




** DONE refactor: rename AssetMaterialNodeMapLogicService to MaterialNodeMapLogicAssetService
CLOSED: [2018-11-15 Thu 10:01]

** DONE feat: asset children: sort by name
CLOSED: [2018-11-15 Thu 10:54]

** DONE feat: asset tree: sort by name
CLOSED: [2018-11-15 Thu 11:19]

////** TODO feat: scene tree: sort by name

** DONE feat: select material: sort by name
CLOSED: [2018-11-15 Thu 11:39]

** DONE feat: select geometry: sort by name
CLOSED: [2018-11-15 Thu 11:48]


** DONE test: pass all tests
CLOSED: [2018-11-15 Thu 11:53]




** DONE test more glb
CLOSED: [2018-11-16 Fri 16:24]
Predator_s.glb


*** DONE support UNSIGNED_INT
CLOSED: [2018-11-15 Thu 17:56]
**** TODO whole
**** TODO stream

*** DONE test assemble->geometrys(whole, stream),materials+texture+image(whole, stream)
CLOSED: [2018-11-15 Thu 17:56]





*** TODO out.glb



*** TODO out (1).glb



** DONE fix:should catch assemble fatal !!!
CLOSED: [2018-11-16 Fri 06:43]



** DONE fix: inspector->transform: support input 0->.->0->1
CLOSED: [2018-11-16 Fri 07:04]




////** TODO fix: assemble->gameObject has no name: add default name?
e.g. out(8).glb


** DONE load wdb asset error: need undo
CLOSED: [2018-11-16 Fri 08:21]


** DONE fix: import package error: need undo
CLOSED: [2018-11-16 Fri 11:39]





** DONE fix: load asset type error(wpk): should console
CLOSED: [2018-11-16 Fri 11:58]



** DONE fix:1.load wdb asset;2.remove wdb gameObject->map;3.add empty gameObject;4.undo;add emptyGameObject
CLOSED: [2018-11-16 Fri 12:43]
warning: Encountered two children with the same key

** DONE fix: fix gameObject/cube redo-undo
CLOSED: [2018-11-16 Fri 12:43]



** DONE refactor: rename addBox to addCube
CLOSED: [2018-11-16 Fri 12:45]


** DONE fix: texture asset->cache miss after load new wdb asset?
CLOSED: [2018-11-16 Fri 13:06]





** DONE fix: publish: need stop?
CLOSED: [2018-11-16 Fri 16:02]



** DONE fix: change texCoord_1 debug to warn
CLOSED: [2018-11-16 Fri 16:24]








** DONE feat: geometry->indices: add support uint32Array, uint8Array
CLOSED: [2018-11-17 Sat 08:59]
support UNSIGNED_SHORT, UNSIGNED_INT






fix convert(whole, stream)

fix get/set indices

fix draw





test:
//detect->extension

//assemble

//generate

//render(normal, ////batch, ////instance)

//geometry->compute normals

//stream load


//redo undo


//reallocate geometry data


//renderWorker->render(include send indicesTypeMap)!!!


//pass all tests









//run test(no worker, worker)(whole, stream)(generate:export,import):
test AlphaModelTest.glb
test by Predator_s.glb from https://sketchfab.com/models/3921d70ad5dd45d1861a1cdd9c49a228




//update benchmark->worker->pipelines




//update wonder.js version

//update wonder-editor


//update publish->wd.min.js










** DONE optimize: redo-undo,remove map from material(out(9).glb)
CLOSED: [2018-11-17 Sat 12:52]
two bugs:
first: set dirty to false when copy?


load new wdb



////not copy when not dirty???





*** DONE optimize undo
CLOSED: [2018-11-17 Sat 12:52]


*** DONE optimize redo
CLOSED: [2018-11-17 Sat 12:52]


*** DONE if no step, not refresh
CLOSED: [2018-11-17 Sat 12:52]





*** DONE remove dead state?
CLOSED: [2018-11-17 Sat 12:52]








** DONE feat(asset): support load gltf zip
CLOSED: [2018-11-17 Sat 21:54]


test:
pass u,i test


pass run test


** DONE console: ui: log,info,warn should break line
CLOSED: [2018-11-17 Sat 22:01]




** DONE publish not stop should warn
CLOSED: [2018-11-18 Sun 07:37]



** DONE fix: load Printer.glb error
CLOSED: [2018-11-18 Sun 07:52]


** DONE update online demo
CLOSED: [2018-11-18 Sun 21:40]







** DONE add css.map
CLOSED: [2018-11-19 Mon 09:45]



** DONE fix: inspector: change material type shouldn't rename
CLOSED: [2018-11-19 Mon 10:58]





////** TODO fix: relate material bug



** DONE fix: support texCoord_1(give warn and not use it )
CLOSED: [2018-11-19 Mon 11:43]
should only warn once








** DONE check why not show geometry
CLOSED: [2018-11-19 Mon 11:29]

geometry is too small that can't see!







** DONE use index.min.js to test
CLOSED: [2018-11-19 Mon 11:45]





////** TODO optimize: remove map from material?






////** TODO feat(publish): add "open contract check", "show debug info", "use multi thread"
** DONE feat(publish): add "useWorker" setting
CLOSED: [2018-11-19 Mon 19:00]


** DONE fix: maybe has no camera in game view when refresh/import package
CLOSED: [2018-11-19 Mon 19:18]



** DONE ue
CLOSED: [2018-11-19 Mon 21:30]

*** DONE fix:sceneTree->border
CLOSED: [2018-11-19 Mon 20:24]



*** DONE fix(ui):material->diffuseMap:  when move out, border is disappear!
CLOSED: [2018-11-19 Mon 20:30]



*** DONE fix:console->fatal->text should vertical center
CLOSED: [2018-11-19 Mon 20:34]















*** DONE change box size
CLOSED: [2018-11-19 Mon 21:17]
*** DONE change arcball distance,speed,...
CLOSED: [2018-11-19 Mon 21:17]
*** DONE change grid plane size
CLOSED: [2018-11-19 Mon 21:17]
*** DONE change default scene-> direction light rotation
CLOSED: [2018-11-19 Mon 21:17]



*** DONE pass all tests
CLOSED: [2018-11-19 Mon 21:17]




*** DONE expand engine->setting.json->buffer
CLOSED: [2018-11-19 Mon 21:30]







** DONE optimize(memory): redo-undo
CLOSED: [2018-11-23 Fri 11:57]
*** DONE copy geometry
CLOSED: [2018-11-20 Tue 10:59]
//add copied points


////not copy&&restore and remove copied points!!!???
(need test reallocate geometry)



*** DONE optimize deepCopy all typeArrays(material, transform, ...)
CLOSED: [2018-11-21 Wed 05:51]
add copied points:
//transform
//light material



////*** TODO change gameObjectRecord, transformRecord -> maps to immutable

*** DONE optimize gameObjectRecord, transformRecord -> maps: add flag to mark is dirty?
CLOSED: [2018-11-21 Wed 05:22]

//meshRendererRecord:
  basicMaterialRenderGameObjectMap: renderGameObjectMap,
  lightMaterialRenderGameObjectMap: renderGameObjectMap,
  gameObjectMap,

*** DONE restore  transform,material -> typeArrays
CLOSED: [2018-11-21 Wed 21:08]


*** DONE optimize geometry->typeArrays
CLOSED: [2018-11-21 Wed 21:08]
//reset to e10cece and commit new


//remove material->groupMap


//remove isPointDataDirtyForRestore






*** DONE test: reallocate geometry
CLOSED: [2018-11-22 Thu 11:28]
test memory after dispose VC(trigger reallocate)



//pass editor test:
undo
undo, redo


////pass run test



//rename ToNewBuffer to ToBuffer





////engine: 
not reset infos when dispose;
not copy and restore infos;
hasGeometryXXX->isAlive


////add geometry point "immutable" test case






*** TODO pass editor tests
//rename: ToDeepCopyState



*** TODO optimize copy editor state
////remove component type map?




////*** TODO optimize copy ui state
scene tree node->tree children

if not show children, not render?






////*** TODO optimize: decrease disposeCount(for editor)
test memory after dispose VC(trigger reallocate)









*** DONE fix(redo-undo): run:
CLOSED: [2018-11-23 Fri 10:06]
////**** TODO shouldn't loopBody when run
////**** TODO shouldn't undo to the state before run when run?


////** TODO fix(redo-undo): undo after run.  should stop loop

**** DONE undo to the state before run shouldn't stop run
CLOSED: [2018-11-23 Fri 10:06]



*** optimize redo-undo stack

**** remove dead state(added when run) when stop


**** remove dead state when not run




*** DONE add editor->setting.json: max redo-undo stack size(default is 50)
CLOSED: [2018-11-23 Fri 11:56]



////*** TODO select not redo-undo(sceneTree node, assetTree node, asset children node)




** DONE fix(ui): header->file: remove ctrl+z info
CLOSED: [2018-11-23 Fri 12:00]




////** TODO fix: load elf_girl, three-storey_house: three-storey_house->texture not be load and its material use girl texture!!!




** DONE publish->loading: 100%
CLOSED: [2018-11-23 Fri 13:46]



** DONE update online demo
CLOSED: [2018-11-23 Fri 13:46]
















** DONE demo: add demo scene(.wpk)
CLOSED: [2018-11-23 Fri 13:46]

*** TODO export package,scene

*** TODO publish local and test perf



** DONE fix:index.html->no sharedArrayBuffer
CLOSED: [2018-11-24 Sat 07:47]





** DONE fix: texture:judge image data
CLOSED: [2018-11-24 Sat 09:19]



** DONE optimize: export package
CLOSED: [2018-11-24 Sat 19:46]

//optimize write buffer

//optimize _writeBinBufferByBufferViewData



//fix judge asset->equal->name





wpk->sceneWDB,asb should remove duplicate asset wdb data(related)




** DONE fix:ui->header: can't close menu after import package(under linux)
CLOSED: [2018-11-24 Sat 20:08]




** DONE fix:dispose camera->parent gameObject
CLOSED: [2018-11-24 Sat 21:25]


** DONE feat: change cube->scale to 1; change BoxGeometry->vertices to -0.5 - 0.5
CLOSED: [2018-11-24 Sat 21:33]


** DONE feat: expand gridplane
CLOSED: [2018-11-24 Sat 21:42]


** DONE wide header
CLOSED: [2018-11-24 Sat 21:45]


** DONE update online demo
CLOSED: [2018-11-24 Sat 21:49]

fix:ui->header: can't close menu after import package(under linux)(need confirm)



** DONE test: add case
CLOSED: [2018-11-25 Sun 06:02]





** DONE fix(ui): fix select material,geometry(line break?)
CLOSED: [2018-11-25 Sun 07:50]


** DONE fix: import package,... load detect position
CLOSED: [2018-11-25 Sun 07:53]


** DONE fix: click header
CLOSED: [2018-11-25 Sun 08:02]




** DONE update online demo
CLOSED: [2018-11-25 Sun 08:05]


** DONE fix: remove healer wdb may affect my_little_xxx!!??
CLOSED: [2018-11-25 Sun 12:02]
1.import DemoScene1.wpk
2.import my_little_pony_dream_house.zip 
3.drag it to scene
4.import healer_houseshop_crazy_pumpkin.zip
5.remove healer_houseshop_crazy_pumpkin wdb asset


scene->my_little_pony_dream_house not render!!!
(
but its gameObjects still has geometrys;
the geometrys' points not change;
the geometrys' vbo buffer not channge;
)





*** DONE fix: wonder.js->remove geometry-> disposedIndexMap
CLOSED: [2018-11-25 Sun 12:02]



** DONE optimize memory 
CLOSED: [2018-11-25 Sun 12:42]
editor: should reallocate geometry when has not enough points space





** DONE fix: select geometry,material->title css
CLOSED: [2018-11-25 Sun 15:31]



** DONE fix: drag wdb->image
CLOSED: [2018-11-25 Sun 15:53]




** DONE expand camera->fovy
CLOSED: [2018-11-25 Sun 16:09]




** DONE source is too large:1.load wdb to cause it;2.export;3.import
CLOSED: [2018-11-26 Mon 13:45]
*** DONE optimize wpk: 1.not store asb->geometry data to wdb;2.import wpk->relate scene wdb and assets in assemble!
CLOSED: [2018-11-26 Mon 13:45]



*** DONE optimize wpk: geometry+images
CLOSED: [2018-11-26 Mon 13:45]



*** DONE refactor: wonder.js: remove log comment
CLOSED: [2018-11-26 Mon 13:48]



*** DONE test
CLOSED: [2018-11-26 Mon 13:48]








** DONE point light not work after import package
CLOSED: [2018-11-26 Mon 18:07]



** DONE pass all tests
CLOSED: [2018-11-26 Mon 18:07]



** DONE import package
CLOSED: [2018-11-26 Mon 20:13]
*** DONE not redo-undo
CLOSED: [2018-11-26 Mon 19:58]



*** DONE 1.undo;2.dispose assets;3.reallocate(10%);4.import;  if success, clear redo-undo stack; else, undo;
CLOSED: [2018-11-26 Mon 19:58]



*** DONE test
CLOSED: [2018-11-26 Mon 19:58]







*** optimize import



** DONE fix: publish bug
CLOSED: [2018-11-27 Tue 08:48]






** DONE demo scene3: room scene
CLOSED: [2018-11-27 Tue 10:16]












** optimize
*** optimize local package(run in browser)


*** optimize demoScene2*7









** optimize: why bedroom so slow???








** DONE refactor: rename Wdb to WDB(@mickey)
CLOSED: [2018-09-15 Sat 16:02]




** DONE fix test(@mickey)
CLOSED: [2018-09-15 Sat 16:03]

*** DONE test:watch will trigger bsb:watch
CLOSED: [2018-09-15 Sat 16:03]

*** DONE test all cases takes too long time!(optimize)
CLOSED: [2018-09-15 Sat 16:03]







** TODO pass e2e test
update data json


////update wonder-converter-tool

////update all wdb


direction light use rotation instead of position


arcball:
not bind event when init, initGameObject


imgui->customData


load imgui,wdb:
handleWhenLoading
move param->state to last



assemble->add config


*** DONE pass render test
CLOSED: [2018-11-27 Tue 19:18]
remove redo-undo, load_wdb...

fix loadIMGUI



*** DONE pass pf test
CLOSED: [2018-11-27 Tue 21:01]
//no worker job

//worker job


//remove redo_undo...


//fix loadIMGUI










//update wonder-log version



*** create and dispose
test indices32 + indices16



** give benchmark report

test all?
















** DONE refactor loading
CLOSED: [2018-11-27 Tue 21:25]

hide loading data?














////*** TODO add statics








** fix demo
//wonder.js add demos


*** DONE fix event
CLOSED: [2018-08-05 Sun 20:15]


*** DONE worker
CLOSED: [2018-08-05 Sun 21:47]

//remove control data


**** DONE directly store data in render worker state
CLOSED: [2018-08-05 Sun 21:47]
because render worker state is created only once

















** DONE publish engine
CLOSED: [2018-11-28 Wed 12:43]


////** TODO extend service,component
move service out to be new project








/* 编辑器Editor
////** TODO add init event test


*** DONE pass all TODOS
CLOSED: [2018-11-27 Tue 21:50]

*** DONE coverage
CLOSED: [2018-11-27 Tue 21:56]


*** DONE code climate
CLOSED: [2018-11-28 Wed 11:15]






*** DONE pass ci
CLOSED: [2018-11-28 Wed 12:07]
pass


should show test coverage


*** DONE remove example in github
CLOSED: [2018-11-28 Wed 12:09]




*** DONE publish
CLOSED: [2018-11-28 Wed 12:43]














** DONE publish editor
CLOSED: [2018-11-29 Thu 13:39]
*** DONE update wonder-log
CLOSED: [2018-11-28 Wed 13:25]

*** DONE update wonder.js
CLOSED: [2018-11-28 Wed 13:25]


*** DONE pass all TODOS
CLOSED: [2018-11-28 Wed 17:19]




*** DONE coverage
CLOSED: [2018-11-29 Thu 10:00]
open ui


*** DONE code climate
CLOSED: [2018-11-29 Thu 09:55]


*** DONE change sphere size
CLOSED: [2018-11-29 Thu 10:03]


*** DONE ci
CLOSED: [2018-11-29 Thu 10:03]



*** DONE fix: render worker: point light not work
CLOSED: [2018-11-29 Thu 11:50]


*** DONE update publish->engine->wd.min.js
CLOSED: [2018-11-29 Thu 11:52]


*** DONE update online demo
CLOSED: [2018-11-29 Thu 13:07]


**** DONE remove engine demos
CLOSED: [2018-11-29 Thu 10:11]
**** DONE set isDebug to false
CLOSED: [2018-11-29 Thu 11:52]

**** update logo


////*** TODO update wdb


**** give convert gltf to glb resources
https://gltf-viewer.donmccurdy.com/
https://glb-packer.glitch.me/



**** check online demo by @mickey(linux) and windows(test in internet bar?)









*** DONE editor: change to GPL license
CLOSED: [2018-11-29 Thu 12:10]



*** DONE .bumpedrc add "update Copyright.re->getVersion->version" task before "bsb:build"
CLOSED: [2018-11-29 Thu 13:21]


*** DONE remove wonder-package
CLOSED: [2018-11-29 Thu 13:22]


*** DONE publish
CLOSED: [2018-11-29 Thu 13:39]





** DONE update collections
CLOSED: [2018-11-29 Thu 16:59]



** TODO push org, temp



** TODO admin forum



** TODO announce to qq




** TODO publish 迭代报告




** improve
*** console: should show last console message below(refer to unity)







* won't fix

** fix: import/export package->asset->empty folder miss

** fix arcball bug: change distance/minDistance; should update transform inspector

** fix(package):if import package fail, should close select nav





* 未解决的问题

** TODO fix editor: box with logo.png+direction light has light rings!!! why?



* 明日计划
** TODO 买个新的服务器(内地)并备案


** TODO editor: support picking and add axis
*** TODO editor: add mesh collision check

source can refer to playcanvas

*** TODO editor: add picking


















* 中期研究


* TODO 未来7日计划














** TODO pass in window
*** TODO chrome

*** TODO firefox

////*** TODO ie11













** TODO publish




** TODO publish v1.0.0-beta.1
(may not contain all feature of v0.x version!)

author be company name
author: add company website
https://hexo.io/

banner=>@link change to company repo link


not use multi thread render defaultly(close it)
(engine in editor should close it too!)


update Wonder-Editor->wonder.js version

**** TODO use baas to host editor, website server?
https://www.firebase.com/docs/
https://www.bmob.cn/
https://z.wilddog.com/overview/realtime


PRODUCT ANALYTICS FOR PRODUCT PEOPLE:
https://mixpanel.com/



BaaS服务平台有哪些？
https://www.zhihu.com/question/22098754


*** TODO refactor Wonder-Editor
remove rollup -g, use local rollup(Wonder-Package, Wonder-Editor):
remove rollup.config.js, use gulp rollup instead


Wonder-Editor->.travis:
remove npm install rollup -g
remove more?




rollup->config remove:
    addNamedExports(namedExports, namedExportsData.immutable);
    addNamedExports(namedExports, namedExportsData.bowser);
    addNamedExports(namedExports, namedExportsData["wonder-expect.js"]);



**** TODO travis add cache 
Wonder-Editor add cache





*** TODO change license
wonder-editor: use gpl?bsd?mit?



*** TODO fix package.json
Wonder.js, Wonder-Editor, Wonder-XXX
change package->authors/homepage to Wonder

*** TODO publish types to definition repo
publish wonder.js types
publish wonder-fantancy-land types

update wonder-commonlib, wonder-frp types

*** TODO pass run in windows=>ie11
fix:
instance_xxx_shadow_xxx
merge_model




*** TODO other



increase runtime test rate from 92% to 95%


can work from the scratch
(runtime, package, test, converter, height generater)
(commonLib, frp)


support full screen(refer to babylon.engine.ts=>450 line)


** TODO optimize
compress geometry:
https://github.com/google/draco

** TODO finish projects to apply engine(beta)
(add needed feature from 0.x engine version!!!)

(
use reason to write some demos, and use js to write some demos

(because user can use both reason or js to write its logic(e.g. in script component))
)



*** TODO mobile


**** TODO Multiresolution adaptation


**** TODO add mobile render pipeline



**** TODO run test 
***** TODO show model





*** TODO game(both in pc and mobile)
**** TODO 3d snake
**** TODO poke a mole 



*** TODO indoor scene(both in pc and mobile)




*** TODO finish a multi-player, game-replay game
refer to:
http://gad.qq.com/article/detail/28682
http://gad.qq.com/article/detail/28219
http://gad.qq.com/article/detail/29595


https://blog.codingnow.com/2016/10/synchronization.html
https://blog.codingnow.com/2016/10/gamesync.html


use ecs to write gameplay logic!!!???


according to game-replay function to understand why system can't invoke each other!!!



according to multi-player function to understand ecs(to handle diferent component/data; restore one or more components)!!!


*** TODO game code should not import not used code
not initData/add init,dispose together?
or game code will not import code except initData?



*** TODO in pc

**** TODO write a rpg game(spirit game)(spirit dream?)(can get resource about 3d engine, meditation, spirit, pi gu, juexing...)
refer to https://github.com/pissang/qtek-bootcamp 

use blender to generate assets


(taiji game? yijing game?)


**** TODO build custom outer scene(octree+lod+direction light+collision+shadowmap+terrain+water(mirror reflection, refraction) + morph animation player character)
***** TODO support physics heightmap
add physics box,sphere
player can collision with these box,sphere







add demo:
refer to babylonjs=>Samples/Scenes/WorldMonger/

refer to http://www.babylonjs-playground.com/#E6OZX#7
add mix map, normal map

layer texture(blend)(use blend map)

water

cloud

sky dome


add tree

add grass

shadow(shadowMap, lightMap)




**** TODO build custom room scene(point light+lightmap+shadowmap+cubemap reflection+articulated camera+collision)





*** TODO in mobile
**** TODO run in mobile
***** TODO rewrite bainian project(use require:cmd/nodejs)
****** TODO fix in mobile
run in mobile environment:
fix skin animation:(first animation is not play completely)
(due to elapsed !== _beginElapsedxxx at the first update!)
refactor and test: save begin time
articulated also has the bug!?


build mobile test environment



fix:
set pixel ratio in mobile => set style width/height?
         view.width = view.width * window.devicePixelRatio;
         view.height = view.height * window.devicePixelRatio;
         view.styleWidth = view.width + "px";
         view.styleHeight = view.height + "px";

set viewport?:
gl && gl.viewport(
    camera.viewPort[0] / window.devicePixelRatio,
    camera.viewPort[1] / window.devicePixelRatio,
    camera.viewPort[2] / window.devicePixelRatio,
    camera.viewPort[3] / window.devicePixelRatio
);



optimize:
hongbao=> parse and assemble geometry is slow
(compress position,joint,weight... to one buffer)





fix:
maoke=>arcball camera=>roll up/down is wrong!

unify Animation,SingleLayerKeyFrameAnimation,MultiLayerKeyFrameAnimation=>play=>params
refactor Animation,SingleLayerKeyFrameAnimation,MultiLayerKeyFrameAnimation=>playOneTime(move to Animation)


optimize:
maoke=>arcball camera=>roll is very slow!




enhance mobile debug:
rewrite console:
http://eclipsesource.com/blogs/2012/08/14/debugging-javascript-on-android-and-ios/
use vconsole:
https://www.qianduan.net/vconsole-open-source/

show profile info



feat: Collider add "setFromVertices"
















optimize:
//solve switch cat slow:
//precompute cat2 bone matrix(update(0)?)


//play sound after show 






















**** TODO mobile optimize
http://www.cnblogs.com/ghl_carmack/p/5401906.html
http://www.cnblogs.com/gameknife/p/3515714.html

https://developers.google.com/speed/docs/insights/mobile


http://blog.csdn.net/leonwei/article/details/79298381

***** refer to hongbao:
optimize:
show other model in later(show bainian animation of another model when click on first model)

optimize:
parse and assemble hilo3d(now parse geometry is very slow)



optimize hongbao in ios(also in android?):
optimize model=>antialias in android,ios




optimize hongbao=>03b => cat(xxxSurface_251(66?))=>normal compute:
isn't correct!


**** TODO optimize asset
refer to hongbao:
optimize skin animation
optimize model geometry


**** TODO tao fu wa
**** TODO simple room scene(player with skin animation to navigator)
**** TODO simple outer scene





*** TODO in both
**** TODO car demo(replace material)
**** TODO physics demo(like tao fu wa)
**** TODO jiao's picture demo(particle, picking, hdr, reflection)


*** TODO fix problems
*** TODO optimize








** TODO engine document
*** TODO new website

*** TODO introduce(engine)

*** TODO examples online(////render test)

////*** TODO benchmarks online(pf test)


*** TODO slogan:  for next generation webgl application


*** TODO forum


*** TODO js doc






** TODO support mobile
*** TODO run in mobile?
refer to https://blog.codingnow.com/2017/12/mobile_3d_engine.html :
我一开始就会把引擎的运行时和编辑器设计成 C/S 结构，即编辑器和项目是跑在不同的位置的。开发期间，要求开发者必须把项目运行
在真机上，让移动设备真机变成真正的第二块显示窗口，而不是像 Unity 那样，开发在 PC 上，只在必要的时候打包上传到设备上开发。
这样，开发者自然在整个开发过程中都时刻在关注游戏在真实设备上运行的状况、是否发热严重、帧率是否够、会不会内存不足、操作是
否合理，等等。任何时候，都可以方便快捷的插拔不同的硬件设备做测试，省去繁杂的打包上传流程。 

编辑器和游戏项目基于自定义的简单协议通讯。本质上是在移动设备上运行一个纯引擎的 app ，没有任何资源和业务代码，接管了底层
的 IO 操作，映射到开发机上。当这个 app 运行时读取程序脚本时，其实是通过 usb 或 wifi 读取的开发机上的代码；资源加载亦然。
只需要做好 cache 同步机制，和资源在本地运行几乎没有区别。输入设备也是把开发机的鼠标键盘通过协议映射到移动设备上的，并不
需要在开发的时候去点手机的屏幕。我们还可以为游戏项目实现一些调试功能界面，直接显示放在开发机上，比在手机上做一个调试控制
台，使用起来要舒适的多。 


*** TODO engine
**** TODO 多分辨率适配
http://docs.cocos.com/creator/manual/zh/ui/multi-resolution.html


**** TODO add mobile render pipeline

////** TODO publish alpha.6



*** TODO editor
使用手机扫描二维码，可以立即在手机上预览游戏。


*** TODO application
微信小游戏：
[[http://tech.qq.com/a/20171228/033531.htm][微信宣布小程序增加新类目“小游戏” 已上线《跳一跳》等]]


Facebook Instant Games:
http://gad.qq.com/article/detail/41976
https://zhuanlan.zhihu.com/p/34565801
https://developers.facebook.com/docs/games/instant-games





** TODO publish v1.0.0-rc

*** TODO test in more browsers
pc browser:
qq浏览器 
360
ie11+
edge



mobile browser



** TODO publish v1.0.0


*** TODO ci add pf test(optimize?)


*** TODO add logo

use "?" + "wonder" as logo

*** TODO add more badge
https://isitmaintained.com/




*** TODO other




can work from the scratch
(runtime, package, test, converter, height generater)
(commonLib, frp)


add wonderjs website

add wonderjs blog

add wonderjs forum

add wonderjs online demo


write document, tutorials(use gitbook):
https://www.gitbook.com/



support full screen(refer to babylon.engine.ts=>450 line)
















** TODO optimize render
https://zhuanlan.zhihu.com/p/33865743
https://zhuanlan.zhihu.com/p/33868831
https://interplayoflight.wordpress.com/2017/10/25/how-unreal-renders-a-frame-part-3/


http://www.adriancourreges.com/blog/2015/11/02/gta-v-graphics-study/
http://www.adriancourreges.com/blog/2015/11/02/gta-v-graphics-study-part-2/
http://www.adriancourreges.com/blog/2015/11/02/gta-v-graphics-study-part-3/


** TODO publish


** TODO UI
http://ourmachinery.com/post/ui-rendering-using-primitive-buffers/

http://ourmachinery.com/post/one-draw-call-ui/


** TODO publish


** TODO add tag
** TODO blog
完成博文：展示函数式编程（fp)＋面向数据(do)＋组件架构在引擎中的设计，为编辑器架构设计提供参考

** TODO defer+forward render
**** TODO support transparent

support use forward shading to draw transparent objects



** TODO study how to texture by using tool
https://www.youtube.com/watch?v=p4ngVoGIj1Q
https://www.youtube.com/watch?v=LcCQKuWPhXk
https://www.youtube.com/watch?v=u2GAHnDaUpU



uv map:
https://www.youtube.com/watch?v=f2-FfB9kRmE
https://www.youtube.com/watch?v=W-ZmDKuB6HI



texture painting:
https://www.youtube.com/watch?v=Hr_itixx0Yo




** TODO refactor: add defer render pipeline
refer to stingray=>renderer


user can expand pipeline:
render Object?

add render component?:
defer shading render component
forward render component


refactor glsl:
separate defer render, front render, webgl1, webgl2


need user render script?



*** TODO unit test


*** TODO pass render worker



*** TODO unit test




** TODO publish





** TODO use glsl-optimizer
optimize:
wonder-glsl-compiler should read shader_libs.re and generate completely vs,fs source(buildGLSLSouce)



use it to generate optimized glsl code when gl.shaderSource:
http://aras-p.info/blog/2010/09/29/glsl-optimizer/
https://github.com/aras-p/glsl-optimizer








** TODO shadow
use esm instead of vsm?
http://www.klayge.org/2013/10/07/%E5%88%87%E6%8D%A2%E5%88%B0esm/




*** TODO support forward shading shadow

*** TODO support defer shading shadow
优化4：Shadowing pass
KlayGE用shadow map渲染阴影。其生成shadow map的过程和普通方法一样，这里就不累赘了。在使用shadow map的时候有两个选择，以前
的方法是在lighting pass里计算光照的时候就查询shadow map，同时计算阴影。另一个方法来自Screen space shadow map。在每个
lighting pass之前加一个shadowing pass，仅仅查询shadow map和计算阴影本身（结果是个灰度图）。这样的好处是，shadowing可以在
更低的分辨率上计算，而不用和lighting pass用同样的分辨率，提高效率。另外，shadowing pass的结果可以像screen space shadow
map那样做一次blur，在让lighting pass使用。 


https://newq.net/publications/more/s2015-many-lights-course => Part 3: Efficient Shadows from Many Lights



*** TODO pass render worker



*** TODO optimize
https://www.zhihu.com/question/266992189/answer/316708229


**** TODO Shadow Caster Culling
http://blog.csdn.net/bugrunner/article/details/7648647
https://users.aalto.fi/~silvena4/Publications/Shadow_Caster_Culling_for_Efficient_Shadow_Mapping.pdf
https://support.umbra3d.com/hc/en-us/articles/214108565-Optimizing-shadow-mapping-with-Shadow-Caster-Culling
https://support.umbra3d.com/hc/en-us/articles/115003369629-Shadow-Caster-Culling-Explained


***** TODO optimize in engine architecture
http://ourmachinery.com/post/simple-parallel-rendering/






** TODO Wonder.js/wonder-package not post install global packages!
"postinstall": "sudo npm install -g typescript@next && sudo npm install -g rollup && sudo npm install -g typescript-formatter",



** TODO refactor
change Director,GPUDetector to function!

** TODO demo test(in new branch to test)(no unit test,render test)
*** TODO Data driven renderer
rewrite renderer
*** TODO try use webAssembly in engine for cpu compute
**** TODO write a webAssembly demo
use https://github.com/01alchemist/TurboScript to compile js to webAssembly
use webAssembly js api to invoke it in js in demo
*** TODO render rewrite(v)
**** TODO transient Resource System
https://www.slideshare.net/DICEStudio/framegraph-extensible-rendering-architecture-in-frostbite
memory pool for textures



*** TODO refactor
refactor getComponent=>paradigms



add "compilerOptions" to tsconfig.json(add to base tsconfig.json, others extend it)


mateiral add to meshrenderer


use es5,es6=>Object added method to refactor:
use assign instead of extend?

optimize deep clone:
http://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript?rq=1
http://stackoverflow.com/questions/728360/how-do-i-correctly-clone-a-javascript-object?rq=1

use keys in Hash=>getKeys?


upgrade typescript to 2.2

*** TODO loader,asset data driven

refer to https://blog.molecular-matters.com/2013/05/17/adventures-in-data-oriented-design-part-3b-internal-references/:
 you can still make sure that the scripts themselves are contiguous in memory by allocating them with a suitable
 allocator. As an example, I use a linear/stack-based allocator for all resources being loaded, and resources are sorted
 inside their resource bundles. This means that in memory, all script code (also meshes, textures, etc.) will be right
 next to each other, with pointers to scripts stored elsewhere. 




use string id:
http://cowboyprogramming.com/2007/01/04/practical-hash-ids/
http://www.randygaul.net/2015/12/11/preprocessed-strings-for-asset-ids/



** TODO advanced asset load
http://what-when-how.com/Tutorial/topic-4863q9vm8/HTML5-Game-Development-Insights-20.html

http://what-when-how.com/Tutorial/topic-4863q9vm8/HTML5-Game-Development-Insights-333.html


*** TODO support stream load?
https://github.com/AVGP/streaming-webgl-demo
https://github.com/whatwg/streams
https://streams.spec.whatwg.org/


*** TODO support scene stream load
Scene streaming management:
Easily create vast worlds by streaming objects in and out of your scenes. Divide your world into subscenes to avoid
editing conflicts. 

https://stackoverflow.com/questions/25823729/large-3d-scene-streaming
https://forum.unity.com/threads/released-sectr-stream-seamless-scene-streaming.229907/


** TODO continue rewrite(keep engine size min)(1.0.0-alpha.xxx)
*** TODO use Data-Driven Design?





Applications in Games
• Particles, Soft-body, Rigid-body, Fluid Simulation
• Collision, Visibility Detection
• Skeletal Animation



• Group Behavior Simulation

http://twvideo01.ubm-us.net/o1/vault/gdcchina14/presentations/833779_MiloYip_ADataOriented_EN.pdf

http://www.slideshare.net/DICEStudio/culling-the-battlefield-data-oriented-design-in-practice



Think about data first, and code second. Class hierarchies aren’t important, but data access patterns are.
Think about how data in your game is accessed, how it is transformed, and what you end up doing with it, e.g. particles, skinned characters, rigid bodies, and tons of other examples.
When there’s one, there’s many. Think in streams of data.
Be aware of the overhead of virtual functions, pointers to functions, and pointers to member functions.



study "virtual function"




**** TODO unity
https://forum.unity3d.com/threads/data-oriented-designed-game-in-unity.350118/

what's Unity DOES?
Unity DOES use DOD, in the places where it eeks out large benefits.

Mesh data and texture data just makes more sense that way. 
*** TODO support multi-thread(maybe need rewrite runtime)
js multi thread:
https://blog.mozilla.org/javascript/2015/02/26/the-path-to-parallel-javascript/
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer

simd
https://blog.mozilla.org/javascript/2015/03/10/state-of-simd-js-performance-in-firefox/

extract multi thread object/component?


**** TODO multi-thread render
http://www.cnblogs.com/ixnehc/archive/2008/09/04/1284708.html
http://www.bennychen.cn/2011/01/%E5%85%B3%E4%BA%8E%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E6%95%B4%E7%90%86%E5%92%8C%E6%80%9D%E8%80%83/
http://www.cppblog.com/flagship/archive/2009/03/25/77886.html

unity:
https://blogs.unity3d.com/cn/2015/02/06/extending-unity-5-rendering-pipeline-command-buffers/
https://docs.google.com/document/d/1e2jkr_-v5iaZRuHdnMrSv978LuJKYZhsIYnrDkNAuvQ/edit
https://github.com/Unity-Technologies/ScriptableRenderLoop
**** TODO multi-thread load asset



support load multi part of one model?
(refer to http://www.inka3d.com/)
**** TODO multi-thread collision(refer to babylonjs=>worker)
*** TODO rewrite render loop(refer to unity)
**** TODO refactor?
refactor: move material to renderer?


add billboard/line renderer?

add skin mesh renderer?
https://docs.unity3d.com/Manual/class-SkinnedMeshRenderer.html

**** TODO support command buffer
https://docs.unity3d.com/Manual/GraphicsCommandBuffers.html
https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.html


add more render command(e.g., set render target, ...)

**** TODO support Scriptable Render Loops
https://docs.google.com/document/d/1e2jkr_-v5iaZRuHdnMrSv978LuJKYZhsIYnrDkNAuvQ/edit#
https://github.com/Unity-Technologies/ScriptableRenderLoop

TL;DR
Motivation
Need to perform better on modern hardware
Easier to customize & extend, less “black box”
Easier dealing with backwards compatibility
Scriptable Render Loops: the new foundation
API Overview
Usage, inner workings, performance
New built-in “HD Render Loop”
Lighting Features
Material Features
Camera Features
Workflow / Debug Features
Appendix - Current Rendering Pipeline in Unity
Shadows
Forward Rendering
Deferred Shading
Customization
TL;DR
Reimagine the rendering pipeline to support more flexibility and transparency. The main Unity rendering pipeline will be replaced by multiple "Render Loops", built in C# on a C++ foundation. The C# code for the "Render Loops" will be open-sourced on GitHub, enabling users to investigate, enhance, or create their own custom render loops.
Motivation
Current Unity’s rendering pipeline is described in Appendix - Current Rendering Pipeline. There are several improvements we want to make -- the major ones are spelled below.
Need to perform better on modern hardware
Both “one light per draw call” forward rendering, and “stencil mark + draw shape per light” deferred shading are not exactly modern approaches -- they were fine for roughly DX9 hardware, but with advent of compute shaders generally we can do much better. Our forward shading suffers from too many draw calls (CPU + vertex transform cost) and bandwidth consumed by repeated sampling of surface textures & blending; whereas deferred shading suffers from draw call count, not enough light culling, cost of doing stencil mark + draw call per light and repeated fetching of G-buffer data. Additionally, on tile-based GPUs it does tile store+load too much when realtime shadows are involved, and does not take advantage of tile storage or framebuffer fetch.
We’d like to ship Unity with an out-of-the box rendering pipeline that is targeted at modern hardware -- where we can rely on API & GPU features like compute shaders, draw call instancing, constant buffers etc.
Easier to customize & extend, less “black box”
Most of Unity users would probably not modify the built-in rendering pipeline, but some of the more advanced teams do want to modify or extend it. So it has to be extensible and much less opaque than today.
While the current rendering pipeline is somewhat extensible (users can write their own shaders, manually control camera rendering, change settings, extend the rendering pipeline with command buffers), it is not extensible enough. Additionally, it is too much of a “black box”, and while the documentation, conference presentations, MIT-licensed built-in shader source code and community knowledge does fill in the gaps, some parts are hard to understand without a Unity source code license. We want all the high level code and shader/compute code to be a MIT-licensed open source project, similar to how Post-Processing, UI or Networking already are.
A “single render pipeline for everything” likely has some compromises that make it more flexible at expense of performance. We imagine that, for example, these kinds of rendering pipelines would make sense in many cases:
Optimized for modern PC/console (DX11 baseline, “high end” graphics).
Optimized for on-tile storage of mobile GPUs, using framebuffer fetch or other available techniques.
Optimized for VR (e.g. forward shading + MSAA, single-pass rendering, caching/sharing eye rendering results in distance, various schemes of viewport/resolution stitching).
Optimized for low-end devices (old mobile, old PC) or simple 2D games: simple one pass lighting (limited # of lights, and/or vertex lighting).
These don’t have to be physically separate rendering pipelines, could be options in some other existing pipelines.
Easier dealing with backwards compatibility
This is a hard problem for us at Unity R&D, basically doing big changes to how the rendering engine works is quite hard -- mostly because people do expect to update to a more recent Unity version and have things “still working as they did”. Except when they don’t, i.e. they actively want new changes... For example, we changed Standard shader from Blinn-Phong to GGX specular in Unity 5.3 -- mostly this is a good thing, except for people who were mid-production and now their specular behaves differently (so they probably have to re-tweak their lighting setups and materials).
We’re thinking, that if the high level structure of the rendering code, and all the shader code, was easily “forkable” and versionable, then this problem could become easier.

Scriptable Render Loops: the new foundation
We think all or most of the problems listed above can be solved fairly elegantly by having a solid, orthogonal, performant foundation to build upon, which would basically be “an ability to render sets of objects with various filtering criteria efficiently”. The division of work would be:
Unity C++ code
C#/shader code (MIT open source)
Culling
Render set of objects with filter/sort/params
Internal graphics platform abstraction
Camera setup
Light setup
Shadows setup
Frame render pass structure & logic
Shader/compute code

The C++ side would be mostly not even aware that things like “Camera” or “Light” exist; e.g. culling code gets arrays of bounding primitives and matrices / culling planes as input. It does not care whether it’s culling main view, reflection rendering view or a shadow map view.
Likewise, rendering code is expressed in terms of “from the culling results, render everything that is within opaque render queues range, has this shader pass and does not have that shader pass, sort by material then by distance, setup light probe constants per-object”. There is some amount of conventions and built-in things in there, mostly in what kind of data should be set as per-instance data for each object (light probes, reflection probes, lightmaps, per-object light lists etc.).
There’s a lot of underlying platform graphics abstraction changes that we’re doing in order to be able to provide a robust, high performance and orthogonal set of “building blocks” to build scriptable render loops upon, but they are mostly outside of the scope of this document. Some of the changes worked on are:
Expose “Buffer” as a C# class, that would be used for all kinds of buffer data (vertices, indices, uniforms, compute data etc.). Ability to create and manually update uniform/constant buffers from C# side.
Compute shader related improvements, particularly how data is passed to them.
Remove split between TextureFormat and RenderTextureFormat, have something like “DataFormat” instead that is used in all graphics related code (similar to DXGI formats on D3D). Expose more formats than today.
Asynchronous readbacks of GPU data. Asynchronous compute.

API Overview
Note: the API is in flux, and this document might not be exact wrt whatever Unity version you’re testing with right now.
The main entry point is RenderLoop.renderLoopDelegate, which is in a form of
bool PrepareRenderLoop(Camera[] cameras, RenderLoop outputLoop);
When the render loop delegate is registered, then all rendering goes into that function, and the existing built-in rendering loops are not executed at all.
Inside of the render loop delegate, typically it would do culling for all the cameras (via the new CullResults class), and then do series of calls to RenderLoop.DrawRenderers intermixed with CommandBuffer calls to setup global shader properties, change render targets, dispatch compute shaders etc.
Overall, the design is that the C# render loop code has full control over per-camera logic (it gets all cameras as input), and all per-light logic (it gets all visible lights as a culling result), but generally does not do per-object logic. Objects are rendered in “sets” -- DrawRenderers call that specifies which subset of visible objects to render, how to sort them, and what kind of per-object data to setup.
The simplest possible render loop would look something like this:
public bool Render(Camera[] cameras, RenderLoop renderLoop)
{
  foreach (var camera in cameras)
  {
      // cull a camera
      CullResults cull;
      CullingParameters cullingParams;
      if (!CullResults.GetCullingParameters (camera, out cullingParams))
          continue;
      cull = CullResults.Cull (ref cullingParams, renderLoop);
      renderLoop.SetupCameraProperties (camera);

      // setup render target and clear it
      var cmd = new CommandBuffer();
      cmd.SetRenderTarget(BuiltinRenderTextureType.CameraTarget);
      cmd.ClearRenderTarget(true, true, Color.black);
      renderLoop.ExecuteCommandBuffer(cmd);
      cmd.Dispose();

      // draw all the opaque objects using ForwardBase shader pass
      var settings = new DrawRendererSettings(cull, camera, "ForwardBase");
      settings.sorting.sortOptions = SortOptions.SortByMaterialThenMesh;
      settings.inputFilter.SetQueuesOpaque();
      renderLoop.DrawRenderers(ref settings);

      renderLoop.Submit ();
  }
  return true;
}


Most important new scripting APIs:
// main entry point
struct RenderLoop
{
void ExecuteCommandBuffer (CommandBuffer);
void DrawRenderers (ref DrawRendererSettings);
void DrawShadows (ref DrawShadowsSettings); // similar, slightly specialized
void DrawSkybox (Camera);
static PrepareRenderLoop renderLoopDelegate;
}

// Setup and control how sets of objects are rendered by RenderLoop.DrawRenderers
struct DrawRendererSettings
{
DrawRendererSortSettings sorting;
ShaderPassName shaderPassName;
InputFilter inputFilter;
RendererConfiguration rendererConfiguration;
CullResults cullResults { set };
}

struct DrawRendererSortSettings
{
Matrix4x4 worldToCameraMatrix;
Vector3 cameraPosition;
SortOptions sortOptions;
bool sortOrthographic;
}

enum SortOptions { None, FrontToBack, BackToFront, SortByMaterialThenMesh, ... };

struct InputFilter
{
int renderQueueMin, renderQueueMax;
int layerMask;
};

// what kind of data should be set up per-object when rendering them
[Flags] enum RendererConfiguration
{
None,
PerObjectLightProbe,
PerObjectReflectionProbes,
PerObjectLightProbeProxyVolume,
PerObjectLightmaps,
ProvideLightIndices,
// ...
};

// Culling and cull results
struct CullResults
{
VisibleLight[] visibleLights;
VisibleReflectionProbe[] visibleReflectionProbes;
bool GetCullingParameters(Camera, out CulingParameters);
static CullResults Cull(ref CullingParameters, RenderLoop renderLoop);
// utility functions, like
// ComputeDirectionalShadowMatricesAndCullingPrimitives etc
}


struct CullingParameters
{
int isOrthographic;
LODParameters lodParameters;
Plane cullingPlanes[10];
int cullingPlaneCount;
int cullingMask;
float layerCullDistances[32];
Matrix4x4 cullingMatrix;
Vector3 position;
float shadowDistance;
ReflectionProbeSortOptions reflectionProbeSortOptions;
Camera camera;
}

struct VisibleLight
{
LightType lightType;
Color finalColor;
Rect screenRect;
Matrix4x4 localToWorld;
Matrix4x4 worldToLocal;
float range;
float invCosHalfSpotAngle;
VisibleLightFlags flags;
Light light { get }
}

struct VisibleReflectionProbe; // similar to VisibleLight…

The API outlined above is very much not final! Things that are very likely to change:
Considering an option to not have RenderLoop class, but instead have CommandBuffer contain functions like DrawRenderers etc., and possibly have nested command buffers too.
Culling API changes to enable more performance, i.e. jobified culling overlapping with other work.
Possibly more renderer filtering options.
More explicit “render pass” controls, instead of current “set render target” API.
Usage, inner workings, performance
The general flow is that your own render loop code is responsible for culling, and for rendering everything. Including setting up per-frame or per-renderpass shader uniform variables, managing temporary render targets and setting them up, dispatching compute shaders etc.
Visible lights and probes can be queried from the cull results, and for example their information put into compute shader buffers for tiled light culling. Alternatively, the render loop provides several ways of setting up per-object light lists for DX9-style forward rendering.
On the CPU performance side, the API is built in a way where there’s generally no per-object operations going on -- the C# side of the code is independent of the scene complexity. It typically loops over cameras, and does some iteration over visible lights to either render shadows, or to pack light data for shader usage. The rest of code that is written in C# is setting up render passes / render textures, and issuing “draw this subset of visible objects” commands.
The C++ part of code (culling, DrawRenderers, DrawShadows) is written in a high-performance style that generally just goes over tightly packed data arrays, and is internally multithreaded. Our current experiments show that with this split (high level frame setup in C#, culling/rendering in C++) we can get same or even better performance of our previous rendering loop implementations.
The C# side looks like it would create a lot of garbage-collected objects; we are looking into ways of exposing “native” (C++ side) data directly to C# without extra round-trips; in C# that would look very similar to an array that writes directly into native side memory. This is a somewhat separate topic, which we’ll talk about separately.

New built-in “HD Render Loop”
We plan to provide a built-in “HD Render Loop” targeted at modern (compute-capable) platforms. Currently it is developed with PC and PS4/XB1 consoles in mind, but we’ll be looking at optimizing it for high-end mobile platforms too. Of particular interest for mobile is optimizing it for on-tile storage / framebuffer fetch and other bandwidth-saving techniques.
Internally, shaders are written in a way that is less reliant on separate shader variants for every imaginable knob, and more using “static” (uniform based) branching, with shader variant specializations only used where that makes sense based on shader analysis / profiling on modern GPUs.
The new HDRenderLoop is being developed at github ScriptableRenderLoop (might be messy at any point, only use if you’re super-curious right now).
Lighting Features
Tiled light culling with compute shaders:
Fine pruned tiled lighting (FPTL) for deferred shaded opaque objects.
Clustered tiled lighting for forward-rendered objects and transparencies.
Rendering can be switched between deferred and forward, depending on what is better for the project.
Lights:
Usual punctual (point/spot) and directional lights.
Area lights (polygonal lights and line lights).
Correct linear lighting & PBR.
Physical light units, IES lights.
(Later) Frustum lights (i.e. bounded directional light).
Shadows:
All realtime shadows are suballocated from a single atlas.
Intuitive controls over shadow memory budget and per-light resolution overrides.
Better PCF filtering, particularly for spot/point lights.
Shadows on semitransparent objects.
GI:
Correct HDR.
Consistency with direct illumination.
(Later) Improved Shadows
Exponential shadow maps (ESM/EVSM).
Improved shadows for area lights.
(Later) Volumetric Lighting
Sky/fog atmospheric scattering model.
Local fog.
Material Features
GGX with Metal & Specular parametrizations, similar to current Standard shader.
Anisotropic GGX (Metal parametrization)
Sub-surface scattering & transmission
Clear coat
Double sided support
Good specular occlusion
Layered materials (mix & mask inputs of other materials, with up to 4 layers)
Heightmaps either via parallax or displacement tessellation
(later) Built-in LOD cross-fade / dithering
(later) Hair, Eye, Cloth shading models
Camera Features
Physically based camera parameters
Support for Unity’s PostProcessing stack
Distortion
Velocity buffer (for motion blur / temporal AA)
(later) Half/quarter resolution rendering (e.g. for particles) and compositing.
Workflow / Debug Features
Views of shader inputs (albedo, normals etc.)
Views of all intermediate buffers of rendering (lighting, motion vectors etc.)
Debug menu to control rendering of various passes

Appendix - Current Rendering Pipeline in Unity
Currently (Unity 5.5 and earlier) Unity supports two rendering pipelines for scene (forward rendering and deferred shading), and one way to render realtime shadows. Following is the description of the current pipeline in more detail:
Shadows
Shadowing system mostly works the same no matter whether the forward or deferred shading is used.
Each realtime light with shadows enabled gets a separate shadow map.
Shadow maps are traditional depth texture maps, in shaders sampled with PCF filtering (no VSM/EVSM etc. shadows).
Directional lights can use cascaded shadow maps (2 or 4 cascades); the shadow map space is divided into cascades like in an atlas.
Spot lights always use simple 2D shadowmap; point lights use a cubemap.
Shadowmap size is computed based on quality settings, screen resolution and light’s projection size on screen; or can be controlled by game developer explicitly from scripts per-light.
Cascaded shadow maps are applied in “screen space” -- there’s a separate “gather and do PCF filtering” step that produces screenspace shadow mask texture; later on regular object rendering just does one sample into this texture.
No support for receiving shadows onto semitransparent objects.
Forward Rendering
The default mode of operation is largely DX9-style “one draw call per light with additive blending”. Quality settings of the game determine how many lights per-object will be rendered in realtime; the rest are folded into a spherical harmonics (SH) representation and rendered together with other ambient lighting.
Optionally before main scene rendering: a “depth texture” rendering pass. This kicks in if scripts require it, or other features (e.g. realtime cascaded shadows) need it. Conceptually this is similar to Z-prepass; produces a texture with scene depth buffer.
Optionally before main scene rendering: a “motion vectors” rendering pass. This kicks in if scripts (e.g. motion blur or temporal AA) require it. Renders a texture of velocity vectors for objects that need them.
Realtime shadow maps are rendered before main scene rendering; all shadows are in memory at once.
Actual scene rendering pass specialized in two shader sets: “ForwardBase” (ambient/probes + lightmaps + lighting/shadows from main directional light), followed by additive blending “ForwardAdd”, that does realtime lighting one light at a time.
Deferred Shading
This is “traditional” DX9-style deferred shading: G-buffer rendering pass, followed by “render light shapes one by one” pass where each of them reads G-buffer data, computes illumination and adds it into lighting buffer.
Similar to forward rendering, an optional motion vectors pass before the G-buffer.
Reflection probes are rendered one by one similar to lights, by rendering box shapes and adding reflections into a texture.
Lights are rendered one by one, by rendering light shapes (fullscreen quad or sphere or cone) and adding reflections into a texture.
Shadow map for a light is rendered just before rendering each light, and generally discarded right after done with it.
Stencil marking is used for both lights and reflection probes to limit the amount of pixels actually computed.
Objects that don’t support deferred shading, and all semitransparent objects, are rendered using forward rendering.
Customization
It is possible to customize the above behavior to some extent, but not much. For example, Valve’s The Lab Renderer (on Asset Store) replaces the built-in behavior by (purely in C# + shaders):
Implementing a custom shadows system, where all shadows are packed into one atlas.
Custom forward rendering system, where all lights are rendered in one pass; light information is setup into custom shader uniform variables.
**** TODO support render component?(refer to Scriptable Render Loop design!)
(upgrade render command to render component?)
so now has two type component:
logic component
render component


regard different render loop as different render object
(mobile,webgl1 pc,webgl2 pc)
(forward render, defer render)

so now has two type object:
logic object
render object




so now has two type script component user can control:
logic script component
render script component(replace command buffer design?)



move buffer,bufferContainer logic to component?
(e.g. so can move animation,shadow logic all to component?)
or buffer,bufferContainer can be extensible by user?


solve:
communication between:
logic object and render object
logic component and render component


*** TODO add unit test

*** TODO study how to separete low-level(optimized) and high-level(extensible) parts
refer to unity:
low-level:c++   high performance, multi thread
high-level:c#   extensible

*** TODO study script(integrate with engine?)
*** TODO build simple world editor(v)



*** TODO add cpu particle system(v)
*** TODO add hdr post effect(v)(move to extension)
**** TODO design
refer to unity post process stack:
https://forum.unity3d.com/threads/new-post-processing-stack-pre-release.435581/
https://github.com/Unity-Technologies/PostProcessing/wiki
https://www.reddit.com/r/Unity3D/comments/56r2h6/unity_technologies_postprocessing_stack_image/

refer to babylonjs

*** TODO support webp image format
https://isux.tencent.com/introduction-of-webp.html


** TODO fix bug(refer to mine/Wonder.js=>commits)
//UIRenderer support set canvas size(left,top,width,height)


//fix OBJ converter=>ObjectsConverter:
refer to threejs=>OBJMTLLoader.js
use 0419.obj model
(children should be 448, but mine is 300+!)
(the g group is wrong! maybe all should rewrite!)



//model info

//model color

optimize picking:
compute center point, closest to camera

////show house:
double side?

use basic material?


//flag a,b,c


need add mesh collider

** TODO update .gltf(.wd) to 2.0

** TODO advanced multi-thread
*** TODO multi thread logic
**** TODO add action
**** TODO add collision

*** TODO SIMD



*** TODO task system
main threads(update thread, render thread)
worker threads:worker_thread_count = number_of_cores - main_thread_count


work items



sub task?


task manager

one depend?

priority



open list(not completed job) + need perform list

**** TODO optimize create render command
preallocate 10000 render commands in array

multi thread create render command

**** TODO define render data in config file

*** TODO thread pool
http://www.smartjava.org/content/html5-easily-parallelize-jobs-using-web-workers-and-threadpool
http://stackoverflow.com/questions/13574158/number-of-web-workers-limit
** TODO use optimize-js to package
https://github.com/nolanlawson/optimize-js


////***** TODO add package unit tests
** TODO optimize shaders
https://www.zhihu.com/question/22595954/answer/61277904
study:
tag math+visibility组件
shader cache收集系统


Windows performance toolkit




only iterate shader lib once



看来是根据序号得到顶点变量名
这个处理的好，这样通过查询来获得变量名，就不要先保存这些变量名了:
refer to three:
function fetchAttributeLocations( gl, program, identifiers ) {

		var attributes = {};

		var n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );

		for ( var i = 0; i < n; i ++ ) {

			var info = gl.getActiveAttrib( program, i );
			var name = info.name;

			// console.log("THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:", name, i );

			attributes[ name ] = gl.getAttribLocation( program, name );

		}

		return attributes;

	}


function WebGLUniforms( gl, program, renderer ) {

	UniformContainer.call( this );

	this.renderer = renderer;

	var n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );

	for ( var i = 0; i < n; ++ i ) {

		var info = gl.getActiveUniform( program, i ),
			path = info.name,
			addr = gl.getUniformLocation( program, path );

		parseUniform( info, addr, this );

	}

}





** TODO fbx support morph anim

*** TODO pass skin + morph(use blender)

*** TODO publish




** TODO finish phone=>todo
*** TODO use compress texture?

support .pvr in ios

**** TODO use blender to generate compress texture

*** TODO audio add more control(play one time, stop...)


*** TODO publish 
** TODO optimize(beta)
*** TODO read references
https://developer.nvidia.com/nvidia-gpu-programming-guide

http://www.cnblogs.com/ghl_carmack/p/4107042.html


*** TODO cpu optimize
optimize clone,extend,deepextend:
https://cnodejs.org/topic/56c49662db16d3343df34b13
use Object.assign()
https://github.com/Microsoft/TypeScript/issues/3429
( typescript2.2=>extend)
https://github.com/Microsoft/TypeScript/pull/13604






optimize transform:
optimize Transform=>state?

check is the same in setting position,scale,rotation, localXXX(new value === old value, not set,dirty?)



optimize shader:
staticly compile shader param of libs to one large collection of the one entityObject
(so no need to iterate the shader libs at runtime)


*** TODO memory optimize
add global Temp class, for save temp matrix,vector...
(refer to bjs=>math.ts=>Temp class)

use memory pool instead of Temp class?
(refer to sk_design=>MemoryUtil,MemoryPool)



show memory info:
refer to sk_design=>WebGLRenderer=>dump method


optimize Vector2/3/4:
remove "values" attr


optimize hash=>removeChild



memory optimize:
https://www.scirra.com/blog/76/how-to-write-low-garbage-real-time-javascript
http://blog.tojicode.com/2012/03/javascript-memory-optimization-and.html

http://www.cocos2d-x.org/wiki/How_to_Optimise_Memory_Usage
http://www.cocos2d-x.org/wiki/Memory_Management_of_JSB

http://stackoverflow.com/questions/13914959/three-js-memory-management


http://www.html5gamedevs.com/topic/6903-memory-consumption-difference-between-111-and-112-beta/




use instance pool to re-use render commands

*** TODO specific optimize
**** TODO octree optimize
**** TODO instance optimize
////**** TODO shadow optimize


** TODO optimize cpu(v0.5.8)
//render target renderer(e.g. Mirror,Refraction,DynamicCubemap, ...) and procedural renderer, shadowMap(refer to
babylonjs=>Samples/Demos/Instances/instances.js line 100), VideoTexture,   add "refreshRate", "refresh control"(like
stop refresh,start refresh, refresh(count):refresh the specify times
(Math.ceil, 1=>refresh every frame; 2=>refresh every 2 frames;0=>refresh only in the first frame, ...)
(add refresh rate counter)





use texture matrix to replace repeat,part data



move BoxGeometry, ...(except ModelGeometry,CustomGeometry) computation
to worker
(refer to <<webgl insights>> p81)





optimize math library(e.g., Matrix4,Matrix3...):
use TDL, Closure, and gl-matrix instead? or modify the existed library
based on them?

From the benchmark it is clear that TDL, Closure, and gl-matrix are
the top contenders in terms of performance as tested on a MacBook Pro
(OS X 10.9.5, 2.4 GHz Intel Core i7, 8 GB 1333 MHz DDR3).  





//data orient driven(refer to game engine germ 1/2)



regard octree,lod as benchmark test



https://blogs.msdn.microsoft.com/eternalcoding/2013/05/21/benchmarking-a-html5-game-html5-potatoes-gaming-bench/
https://blogs.msdn.microsoft.com/eternalcoding/2015/01/07/javascript-shoud-i-have-to-cache-my-arrays-length/
https://blogs.msdn.microsoft.com/eternalcoding/2015/02/02/using-user-mark-to-analyze-performance-of-your-javascript-code/




https://www.smashingmagazine.com/2012/11/writing-fast-memory-efficient-javascript/
https://msdn.microsoft.com/en-us/library/windows/apps/hh781219.aspx
https://channel9.msdn.com/Events/Build/2013/4-313
http://malideveloper.arm.com/downloads/GDC14/Thursday/10.30amWebGL.pdf




use webgl-inspector=>highlights to see duplicate setting uniforms

Note that uniforms are specific to programs and they are remembered by the programs, so you don't have to re-set them
every time you switch programs! 




not create duplicate textures







BufferContainer=>getChild=>apply:
remove @cache
use {} instead of Hash



optimize ArticulateAnimation=>_updateTargets





ActionManager=>update
script=>update





optimize benchmark_shadow test:
optimize memory
camera vpMatrix add cache






optimize instance with octree,lod

optimize:
show 10000 spheres with 60fps(instance)
show 20000 spheres with 60fps(instance + lod)
show 40000 spheres with 60fps(instance + octree)
show 60000 spheres with 60fps(instance + octree + lod)

////only render visable instance

////if not support instance, optimize ethier
(refer to bjs(babylonjs))

////*** TODO optimize: cache all uniform/attribute position when init(then look up the cache table to get the position when send glsl data)
////refer to babylonjs=>effect.ts, engine.ts=>getUniforms/getAttributes method








support merge instancing?
http://www.humus.name/Articles/Persson_GraphicsGemsForGames.pdf
http://hacksoflife.blogspot.com/2013/01/instancing-for-bricksmith.html

When reducing the number of draw calls there are two standard approaches. Multiple
instances of a single mesh is typically done with regular instancing. If there are multiple
meshes, but a single instance of each, they can be merged into a single vertex and index
buffer and drawn with a single draw call. However, sometimes you want to draw multiple
meshes, with multiple instances of each, and each with their own transforms or other instance
data. With instancing this results in multiple draw calls. With the standard merging approach
you need to duplicate the vertex data.
We came up with an approach that combine the benefits of merging and instancing such that
you can draw it all with a single draw call without duplicating vertex data. Thus, for the lack of a
better name, it can be referred to as Merge-Instancing.














optimize octree sample: frustum(especially arcball camera), ray picking, collision

bug:
if add/remove EntityObject, will the octree rebuild?




optimize water,terrain



optimize mirrorMirror, dynamicCubemapTexture




optimize lod

reduce composite layers time(when move camera to switch geometry in lod sample):
http://www.chromium.org/developers/design-documents/gpu-accelerated-compositing-in-chrome
http://www.html5rocks.com/en/tutorials/speed/scrolling/
https://developer.chrome.com/devtools/docs/timeline
http://www.html5rocks.com/zh/tutorials/speed/layers/



optimize collision:
add layers:
http://docs.unity3d.com/Manual/LayerBasedCollision.html








optimize shadow(especially point shadow)
bug: 
in collision_box sample, why shadow break when move box down to near the edge of screen?(not caused by light=>shadowCameraXXX)

test light move



not bind color to frame when build shadow map?

not bind and send uniform when build shadow map





optimize:
cache camera=>vpMatrix
shadow layer

////not bind texture when build shadow map










*** TODO other

//if the texture is the same there is NO rebinding:

https://github.com/BabylonJS/Babylon.js/blob/master/Babylon/babylon.engine.ts#L1961



//move "create program" logic out of shader?



**** TODO optimize refer to <<OpenGL Insights>>  39 chapter

Group objects in buffers based on data format (type and layout) and update
frequency.

Ensure that appropriate buffer usage flags are used.

Use static buffers and fully specify the contents of buffers before draw time.


Use immutable textures when available?
If EXT texture storage is not supported, ensure that a complete texture is
created and consistently defined. 


Avoid redefining the format or size of existing textures, and create a new tex- ture instead. 


Use packed depth-stencil for combined depth and stencil support.

Avoid masked clear operations.

Avoid using complex conditional statements and loops with a high maximum number of iterations in shaders. 



**** TODO z prepass

not bind and send uniform when z prepass
(bindless or uniform blocks are ways of minimizing these)






***** TODO WebGLRenderer: sort opaque objects from front to end

On IMR GPUs, this extra bandwidth consumption and fragment work can be limited by sorting and rendering geometry from
front to back (see Figure 24.4).  

An additional heuristic for games is to render the player character first and the sky-box last  









**** TODO update profiling tool
refer to <<OpenGL Insights>> 36 chapter

Intel Graphics Performance Analyzers (GPA):(can use only in windows?)
http://www.intel.com/software/gpa

WebGL Inspector shows the WebGL side, and Frame Analyzer shows the post-translation DirectX equivalent 

start Intel Graphics Performance Analyzers:
Fortunately, starting Chrome with a --no-sandbox flag allows GPA to at- tach to the correct rendering process and
trigger frame captures.  





use [[https://software.intel.com/en-us/gpa/details][Graphics Performance Analyzers]] ?


**** TODO use Map/Set to update Hash/Collection



** TODO advanced terrain
https://zhuanlan.zhihu.com/p/33887115



** TODO optimize memory, cg(v0.5.9)




vertex compress
https://cesiumjs.org/2015/05/18/Vertex-Compression/
compress billboard instance data:
https://cesiumjs.org/2015/10/28/Billboard-Instancing/





optimize benchmark_2000_boxes_forRunTest(add action component)




This kind of unwanted memory churn is usually created by algorithms
that compute intermediate values that are quickly thrown away. 

Listing 4.7 A memory-inefficient linear interpolation function.
Cartesian3.add = function(left, right) { var x = left.x + right.x;
var y = left.y + right.y;
var z = left.z + right.z;
return new Cartesian3(x, y, z); };
Cartesian3.multiplyByScalar = function(value, scalar) {
var x = value.x * scalar;
var y = value.y * scalar;
var z = value.z * scalar;
return new Cartesian3(x, y, z); };
Cartesian3.lerp = function(start, end, t) {
var tmp = Cartesian3.multiplyByScalar(end, t);
var tmp2 = Cartesian3.multiplyByScalar(start, 1.0 - t); return Cartesian3.add(tmp, tmp2);
};


Every call to lerp allocates three objects: two intermediate
Cartesian3 instances and the result instance. While a microbenchmark
of 100,000 calls takes about 9.0 milliseconds in Firefox, it doesn’t
expose a problem with garbage collection because the memory is not
cleaned up until after our benchmark has already completed. 
We can remove the extra memory allocation by using two simple
techniques. First, we require users to pass in an already allocated
result parameter to avoid having to create a new instance every
time. Second, we use module-scoped scratch parameters in calls to add
within lerp. 

Listing 4.8 Memory-efficient linear interpolation using result parameters and scratch variables.
Cartesian3.add = function(left, right, result) {
 result.x = left.x + right.x;
result.y = left.y + right.y;
result.z = left.z + right.z;
return result; };
Cartesian3.multiplyByScalar = function(value, scalar) {
 result.x = value.x * scalar;
result.y = value.y * scalar;
result.z = value.z * scalar;
return result; };
var tmp = new Cartesian3(0, 0, 0); var tmp2 = new Cartesian3(0, 0, 0);
Cartesian3.lerp = function(start, end, t, result) { Cartesian3.multiplyByScalar(end, t, tmp); Cartesian3.multiplyByScalar(start, 1.0 - t, tmp2); return Cartesian3.add(tmp, tmp2, result);
};




clean memory
http://stackoverflow.com/questions/23598471/how-do-i-clean-up-and-unload-a-webgl-canvas-context-from-gpu-after-use





For performance, avoid object allocation in the render loop. Reuse objects and arrays where possible, and avoid built-in
array methods such as map and filter. Each new object creates more work for the Garbage Collector, and in some cases, GC
pauses can freeze an application for multiple frames every few seconds. 






release when need:
manage ProgramTable,BufferTable:
add references count
check references to decide whether to dispose the one whose referencs is 0


https://blogs.msdn.microsoft.com/eternalcoding/2013/09/04/reducing-the-pressure-on-the-garbage-collector-by-using-the-f12-developer-bar-of-internet-explorer-11/


http://goocreate.com/learn/reducing-memory-usage/
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management
http://www.html5rocks.com/en/tutorials/speed/static-mem-pools/


use Array instead of Collection in the key path?

memory allocate
http://www.mystengine.com/blog/?p=59
http://www.cnblogs.com/dreams/archive/2007/03/25/687310.html





** TODO optimize gpu

*** TODO optimize glsl
https://www.opengl.org/wiki/GLSL_Optimizations


[[http://aras-p.info/blog/2011/08/17/fast-mobile-shaders-or-i-did-a-talk-at-siggraph/][Fast Mobile Shaders]]


When we suspect that our application is shader-bound, we can always
perform a simple test to see if this really is the case: Replace all
of the shaders with trivial ones that only render a single
recognizable color and measure the performance. If the performance is
significantly changed, the application is likely shader-bound—either
by GPU computa- tion or by texture fetches performed by the shaders. 




*** TODO other

http://malideveloper.arm.com/downloads/GDC14/Thursday/10.30amWebGL.pdf



////** TODO optimize: batch draw calls(v0.5.10)
use stride in gl.vertexAttribPointer(refer to Wozlla Engine)




render to target support mipmaps(refer to bjs)
*** TODO Vertex cache optimization 
refer to <<OpenGL InSights>> 26 chapter: Indexing Multiple Vertex Arrays
This chapter shows a simple solution to convert nonindexed data into an indexed form, allowing its use in an efficient
way with many file formats such as OBJ, X, VRML, and COLLADA. 

refactor obj,md2 indices build?



A number of algorithms can be found in the literature for reorganizing the indices in order to get a better
post-transform cache usage. 
In particular, I recom- mend nvTriStrip, which is slow but ready-to-use, and Tom Forsyth’s
algo- rithm [Forsyth 06], which runs in linear time. 

https://www.opengl.org/discussion_boards/showthread.php/167481-Vertex-cache-optimization

http://tomforsyth1000.github.io/papers/fast_vert_cache_opt.html

https://github.com/vivkin/forsyth
http://www.cnblogs.com/ghl_carmack/p/4107042.html


*** DONE VAO

webgl 2? just use extension in webgl 1!
To save a lot of API calls, use vertex array objects (VAOs) or interleave static vertex data. 




that can significantly improve per- formance on mobile devices

VAOs are available in WebGL 1.0 with the OES_ vertex_array_object
extension, which is widely supported on mobile devices. As of early
2015, more than 80% of smartphone and tablet clients recorded by
WebGL Stats have it 



If vertex array objects (VAOs) are supported, then we build one for
each combination of vertex buffers and index buffer present in the
DrawParameters objects. As we share the buffers between many different
geometries, the actual number of combinations is usually quite
low. This allows us at dispatch time to simplify all the buffer checks
to a single equality comparison between the current VAO and the
previous one. Even when the VAOs are dif- ferent, setting them with
WebGL is cheaper on the CPU than setting all the different buffers and
vertex pointer attributes, which makes them a big win for complex
scenes.


Adding a fallback for devices without VAO support is also
straightforward. Let’s call the code that binds buffers and sets
vertex attrib pointers related to a specific mesh the binding
block. If VAOs are supported, the code should initialize the VAO of
each mesh using the binding block. Then, when the mesh is drawn, the
code either binds the VAO if VAOs are supported, or executes the
binding block if VAOs are not supported. The only case where this
becomes more complicated is when there’s a different number of active
vertex attribute arrays for different meshes—then the code should add
disable- VertexAttribArray calls where appropriate. For a complete
code example, see an explanation of VAOs* or an implementation of a
fallback path in SceneJS
(https://github.com/xeolabs/scenejs/blob/v4.0/src/core/display/chunks/geometryChunk.js)




Lowering the number of vertex buffers helps to reduce CPU usage if
VAOs are not a good fit for the code for some reason. This can be done
by interleaving different types of vertex data for the same object: If
we have, for example, positions, texture coordinates, and normals for
each vertex, they can all be stored in the same vertex buffer in an
interleaved fashion. In our CPU-bound drawing test that uses four
vertex attributes, interleaving the attributes increased the FPS
around 4%. The downside is that interleaving the data needs to be
either handled by the content creation pipeline or done at load time;
the latter may marginally slow down loading. Interleaving three
attributes for a million vertices in a tight JS loop had a cost of
around 200 ms on a Nexus 5 (2013 phone). 




http://blog.tojicode.com/2012/10/oesvertexarrayobject-extension.html

http://www.openglsuperbible.com/2013/12/09/vertex-array-performance/

 

*** TODO optimize from <<WebGL Insights>>

For portability, space requirements of varyings and uniforms within the limits of the GLSL ES spec. Consider using
vec4 variables instead of float arrays, as they potentially allow for tighter packing. See A.7 in the GLSL ES spec. 










When using an RGB framebuffer, always implement a fallback to RGBA for when RGB is not supported. Use
gl.checkFramebufferStatus. 




If shrinking the browser window results in massive speed gains, consider using a half-resolution framebuffer during
mouse interaction. 



Use OES_element_index_uint to draw large indexed models with a single draw call.



need change???
The textureProj GLSL function, vec4 color = textureProj(sampler, uv.xyw);, can be simulated with vec4 color =
texture(sampler, uv.xy/uv.w) 



**** TODO ANGLE optimize(refer to <<WebGL Insights>>=>chapter 1):
- Avoid use of gl.TRIANGLE_FAN, as it may be emulated in software.

- Create new textures, rather than changing the dimensions or format of old ones.
  - if only the pixel data contained in a texture need to be updated, it is best to reuse the texture—the additional
overhead is only incurred when updat- ing texture format or dimensions, because these require redefinition of the mip-
map chain. 

- Do Not Perform Clears with Scissors or Masks(color mask,stencil mask) Enabled
so check and warn info when clear

- Avoid Render Wide Lines as Polygons
(ANGLE does not support line widths greater than 1.0, commonly called “wide” lines)




- Avoid Uint8Array Data in Index Buffers


- Avoid 0xFFFF in 16-Bit Index Buffers
  

- Always Specify the Fragment Shader Float Precision

- Do Not Use Rendering Feedback Loops
(In the OpenGL APIs, attempting to write to and sample from the same texture or renderbuffer in a rendering operation is
considered a rendering feedback loop)


- Don’t Use Extensions without Having a Fallback Path

- Use Immutable Textures When Available (use EXT_texture_storage extension to use texStorage* command instead of
  texImage* command)
Historically, OpenGL and WebGL textures had to be created one mip level at a time. OpenGL does this via glTexImage*, a
method that allows users to cre- ate internally inconsistent textures, considered by the GL to be “incomplete.” This
same method is what is available to developers in WebGL, as texImage*. By contrast, Direct3D requires that users define
the dimensions and format of their entire textures at texture creation time, and it enforces internal consistency. 

Because of this difference, ANGLE must do a considerable amount of bookkeep- ing and maintain system memory copies of
all texture data. The ability to define an entire texture at creation time did later get introduced to OpenGL and its
related APIs as immutable textures, which also enforce internal consistency and disallow changes to dimensions and
format. Immutable textures came to OpenGL ES 2.0 with EXT_texture_storage [Khronos 13a], and they are included in the
core OpenGL ES 3.0 specification and the WebGL 2 Editor’s Draft specifica- tion. When immutable textures are available
via extension or core specification, some of ANGLE’s bookkeeping can be avoided by using the texStorage* com- mands to
define textures. 


- Use RED Textures instead of LUMINANCE(use EXT_texture_rg extension [Khronos 11] to use the RED and RG formats)
(simply using RED textures in place of LUMINANCE and RG in place of LUMINANCE_ALPHA when using ANGLE with APIs that
support them) 

In WebGL and unextended OpenGL ES 2.0, the only option developers have for expressing single-channel textures is the
LUMINANCE format, and LUMINANCE_ALPHA for two-channel textures. The EXT_texture_rg extension [Khronos 11] adds the RED
and RG formats, and these formats become core functionality in OpenGL ES 3.0. The formats also appear in the WebGL 2
Editor’s Draft specification. Meanwhile, Direct3D 11 has dropped all support for luminance textures, providing only red
and red-green formats [MSDN 14a]. This may seem to be a trivial difference—a channel is a channel—but sampling from a
luminance texture is performed differently than from textures of other formats. The single channel of a luminance
texture is duplicated into the red, green, and blue channels when a sample is performed, while sampling from a RED
texture populates only the red channel with data. Similarly, the second channel of a LUMINANCE_ALPHA and an RG texture
will populate only the alpha and green channels in a sample, respectively. To support luminance formats against Direct3D
11, rather than alter the swizzle behavior in shaders, ANGLE instead expands the texture data to four channels. This
expansion, and the associ- ated additional memory and texture upload performance costs, can be avoided by developers
keen for clock cycles by simply using RED textures in place of LUMINANCE and RG in place of LUMINANCE_ALPHA when using
ANGLE with APIs that support them. 



- Avoid Full-Texture Swizzle
Texture swizzling is an OpenGL ES 3.0 feature which allows a texture’s compo- nents to be sampled in a different order,
using the TEXTURE_SWIZZLE_R, TEXTURE_SWIZZLE_G, TEXTURE_SWIZZLE_B, and TEXTURE_ SWIZZLE_A texture parameters. This is
most often used to read RGBA textures as BGRA, or vice versa, and can also be used to replicate components as with
luminance textures. This feature is, however, not supported by Direct3D 11. Even though it appears a seemingly simple
operation to perform during the shader translation, it is actually not feasible to determine which textures are sampled
where, because samplers can be passed from function to function as parameters, and the same texture sampling function
can be used to sample various different textures. ANGLE therefore swizzles the texture data itself. This consumes some
memory and incurs some overhead at texture upload. These costs can be avoided by not changing the TEXTURE_SWIZZLE_R,
TEXTURE_SWIZZLE_G, TEXTURE_SWIZZLE_B, and TEXTURE_SWIZZLE_A texture parameters from their defaults. If necessary, use
multiple shader variants to account for dif- ferent texture component orders. 




***** not use

- Avoid Uniform Buffer Binding Offsets
Uniform buffer objects (UBOs), newly added in OpenGL ES 3.0, are bound objects which store uniform data for the use of
GLSL shaders. UBOs offer benefits to developers, including the ability to share uniforms between programs and faster
switching between sets of uniforms. OpenGL ES 3.0 also allows UBOs, much like other buffer objects, to be bound at an
offset into the buffer, rather than just the buffer head. Direct3D, on the other hand, does not support referencing its
analogous structure, constant buffers, until Direct3D 11.1, with the addition of the VSSetConstantBuffers1 method [MSDN
14d]. Offsets are supported with a software workaround on all hardware of lower feature levels. Developers can avoid any
performance penalty associated with this workaround by binding UBOs at offset 0 only. 




***** need more understand!
- Avoid Three-Channel Uint8Array/Uint16Array Data in Vertex Buffers(can use four-channel with Uint32Array data)
Direct3D has limited support for three-channel vertex formats. Only 32-bit three- channel formats (both integer and
float) are supported natively [MSDN 14a]. Other three-channel formats are expanded by ANGLE to four-channel internally
when using a Direct3D backend. If the vertex buffer usage is dynamic, this con- version will be performed each time the
buffer is used in a draw. To avoid the expansion, use four-channel formats with 8- or 16-bit types. 


- Avoid Integer Cube Map Textures
Cube maps with unnormalized integer formats are not supported by Direct3D 11 [MSDN 14c]. The ANGLE team hasn’t
encountered any uses for it, which may be the reason it was left out of D3D11, but it is a feature of OpenGL ES 3.0 and
gets tested by the conformance tests. ANGLE therefore must emulate it in ANGLE’s ESSL to HLSL translator. The cube
texture is replaced by a six- layer 2D array texture, and the face from which to sample, and at what loca- tion, is
manually computed. Rather than unnormalized integer formats, we recommend using normalized integer formats for cube
maps. If integer values are expected, multiply the sampled value by the maximum integer value, and round to the nearest
integer. For example, for signed 16-bit integers: int i = int(round(32767 * f)); 



- Beware of Shadow Lookups in 2D Array Textures
Our final recommendation is a minor one, because the range of hardware affected is relatively small. Shadow comparison
lookups are a feature introduced in OpenGL ES 3.0. These texture lookups can perform prefilter comparison of depth data
contained in a texture against a provided reference value. ES 3.0 also intro- duces new texture types, including 2D
texture arrays. Where these two features intersect, a caveat emerges. Direct3D 11 does support shadow lookups for 2D
tex- ture arrays—but not at feature level 10_0 [MSDN 14e]. For this reason, ANGLE must either exclude feature level 10_0
hardware from ES 3.0 support or implement a workaround, with potential performance penalties. If the latter approach is
cho- sen, developers may encounter performance issues on Direct3D 10.0 hardware. If the former approach is chosen
instead, then OpenGL ES 3.0 would not be avail- able on this hardware at all. 






**** TODO firefox implement webgl(refer to <<WebGL Insights>>=>chapter 2):

- Each drawElements call can only work with one index
type anyway. Keep separate index types in separate element array
buffers. 

Using the same element array buffer with multiple index types only
requires the implementation to maintain separate trees for each type;
there are three pos- sible types so there can be up to three trees to
maintain for a given element array buffer, which multiplies by three
the memory usage and speed overhead. Just don’t do it. There is no
good reason to: Each drawElements call can only work with one index
type anyway. Keep separate index types in separate element array
buffers. 


- So if you don’t need to update a frame, don’t it, don’t even call clear. 

The first conclusion of this discussion is that if you don’t need to
update a frame, avoid- ing re-rendering it will save not only the time
it takes to render it, but also a lot of inter- nal compositing work
and synchronization. So if you don’t need to update a frame, don’t
touch it, don’t even call clear. 

**** TODO refer to <<WebGL Insights>>=>chapter 4:
This means that if we want to expose a property on an object, it’s
faster to make it a public field rather than abstract it behind get
and set methods 



**** TODO refer to <<WebGL Insights>>=>chapter 8(mobile chapter):

An application should not have unnecessary “get” calls of any kind,
especially getError, or frequent calls requiring synchronization like
readPixels, flush, or finish.  


***** Reducing Bandwidth Usage

The more obvious ways to reduce bandwidth are reducing texture or
framebuffer reso- lution.  



optimize full-screen effects
Implementing full-screen effects in an efficient way or avoiding them
altogether can also enable huge bandwidth savings [McCaffrey 12;
Pranckevičius 11]. In particular, it is better to combine different
postprocessing filters into a single shader or add simple post-
processing effects directly into the shaders used to render geometry,
when possible. 



Using lots of small polygons also costs bandwidth on tiler
architectures, since they need to access the vertex data separately
for each tile [Merry 12]. Optimizing models to minimize the vertex and
triangle count helps on these GPUs. 


**** TODO refer to <<WebGL Insights>>=>chapter 10(Turbulenz Engine):

cull lights:
For lights, we may go an extra step by projecting the bounding box
into the screen to calculate how many pixels it would actually light,
discarding the light or disabling its shadows’ maps depending on its
contribution to the scene. 


**** TODO refer to <<WebGL Insights>>=>chapter 14:

When the user spins the model around its turntable using a touch
interface, a smooth frame rate is achieved by rendering to a
low-resolution framebuffer (left). When the user lifts her fingers, we
redraw the model in full resolution (right). 

Listing 14.7 Low-fidelity/high-fidelity modes for glass effect.
MyEngine.Buddha = function() { this.framebuffers = {lo: null, hi: null}; this.textures = {lo: null, hi: null};
};
MyEngine.Buddha.draw = function(gl, turntable) {
var texture, canvas = gl.canvas;
if (turntable.state = = turntable.states.Resting) {
//Use a full-resolution framebuffer:
texture = this.textures.hi; gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffers.hi); gl.viewport(0, 0, canvas.width, canvas.height);
} else {
//Use a half-resolution framebuffer:
texture = this.textures.lo; gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffers.lo); gl.viewport(0, 0, canvas.width/2, canvas.height/2);
}
    //...draw Buddha to offscreen surface...
    gl.viewport(0, 0, canvas.width, canvas.height);
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    gl.bindTexture(gl.TEXTURE_2D, texture);
    //...draw fullscreen triangle to canvas...
    gl.bindTexture(gl.TEXTURE_2D, null);
};
￼

** TODO optimize from <<游戏引擎架构>>
资源运行时管理：
通过记录引用数来释放资源（p265)

增量时间：
设置上限（p292)

调试：
//开发绘制直线、坐标轴等调试绘图api

//研究data driven engine(p656)

//改进GameObject=>update:
use batch update(p679)


//sky box:
close depth write(p441)



** TODO reference
http://www.cppblog.com/liangairan/archive/2013/03/23/198749.html

** TODO add debug Panel(second version)
use ui component to draw

refactor:
add DebugDrawer class


add more info like bjs




** TODO improve transform
learn GPU Pro 5=>managing transforms in hierarchy



** TODO advanced defer shading
*** TODO gbuffer
how to dynamic set expand gbuffer's value(e.g. store emission color or not)???
support pass specular(if has specular map) in gbuffer or not in
support pass emission color in gbuffer or not in



defer shading:
send emission color




*** TODO optimize
**** TODO optimize
***** TODO gbuffer optimize
use the least amount of memory by lowering precision, reconstructing position from depth, packing values together, using
different distributions, and so on. 




compressing normals to 2 channels:
http://aras-p.info/texts/CompactNormalStorage.html
e.g. ???
    vec3 normal = vec3(gb0[3], gb1[3], 0.0);
    normal.z = (1.0 - normal.x*normal.x - normal.y*normal.y);
    normal.z *= sign(dot(normal, u_cameraPos - pos));
    normal = normalize(normal);




not store specularColor, keep it be #ffffff:
Another compression optimization is to drop specular color off. Non metals rarely have colored specular and metals does
not have albedo. So for metals you can use albedo as spec color and for non metals you just need single channel specular
intensity. 



reconstructing position from depth



***** TODO use 3d texture for tile defer shading?
to store light index list and light grid

https://github.com/WebGLSamples/WebGL2Samples/blob/master/samples/texture_3d.html
http://www.realtimerendering.com/blog/webgl-2-new-features/

**** TODO tile-based deferred shading?


use depth range optimize


optimize in webgl2:
https://github.com/tiansijie/Tile_Based_WebGL_DeferredShader:
The WebGL 1.0 is not support reading data form depth buffer. We work around this issue using gl.readPixels. Again, the
WebGL only support UNSIGNED_BYTE, which return a very unaccurate result and enormous reduce the frame rate. 


**** TODO stencil optimize

http://ogldev.atspace.co.uk/www/tutorial37/tutorial37.html











** TODO VR
https://zhuanlan.zhihu.com/p/24952120

http://gad.qq.com/article/detail/40819
* Record



* TODO unsolved problem
** TODO how to ts compile worker file code?


* TODO need improve



* TODO more
