* OOP成员的定义顺序：正常->Virtual->Abstract
如下所示，先定义P__showPercent，然后定义P__showData，最后定义P__getBeginDate：
Protected: {
            P__showPercent: function () {
                ...
            },

            Virtual: {
                P__showData: function (dataArr) {
                    var num = this._getNum(dataArr);	//取出数据

                    this._showNum(num);
                }
            },

            Abstract: {
                P__getBeginDate: function () {
                }
            }
        },

* 常量
用分隔符隔开。
如：
var PLUGIN_NAME = "aaa";
* Typescript
** 成员的定义顺序
private static -> public static -> constructor -> (getter/setter->public->protected->private) attri -> (public->protected->private) method

abstract->virtual->common members

* 	命名原则
使用骆驼式命名


骆驼式命名法： 
       正如它的名称所表示的那样，是指混合使用大小写字母来构成变量和函数的名字。例如，下面是分别用骆驼式命名法和下划线法命名的同一个函数：
插入代码：        printEmployeePaychecks()； 

        骆驼式命名法近年来越来越流行了，在许多新的函数库和Microsoft Windows这样的环境中，它使用得当相多。 

命名原则讨论：骆驼命名法，匈牙利命名法，帕斯卡命名法与下划线命名法



枚举类型以"E"开头

接口以"I"开头

* 	统一使用Id命名，不使用ID命名
如Layer有setCanvasId方法，该方法不命名为setCanvasID
* 	注释
（1）“//*”
	表示一级小标题
	"//**"
	表示二级小标题

	。。。以此类推
（2）“//?”
	表示未确定的，需要修改或补充的内容

（3）方法注释中，一行代码后出现“//”表示输出结果。如：

        /*  对每个数组元素调用iterator，返回调用iterator返回false的元素索引的数组
如 source_arr = ["", "a", "b", ""];
        result = operate.Judge(arr, function (value, index) {
        if (value === "") {
        return false;
        }
        else {
        return true;
        }
        });
        //result = [0, 3];
        */

	表述结果为“result = [0, 3];”

* 	序号
序号都是从0开始，0为第一个。


* 	类的方法、属性
方法：
	构造函数首字母大写，如“Init”

	非构造函数，首字母小写，如“myName”

	私有方法加前缀“_”，保护方法加前缀“P_”。

	使用动词或动词+名词命名。
属性：
	首字母小写，如“myName”

	私有属性加前缀“_”，保护属性加前缀“P_”。	
* 	类名

	以function定义的类，首字母大写。如：

	function Asyn(){}

	对象直接量首字母小写。如：

	asyn = {
		set: function(){}
	}
* 	闭包（以类的概念）中共用的私有成员，加上“_”前缀；
枚举变量不加“_”前缀；function中的私有成员不加“_”前缀；内部类加上“_”前缀；测试describe中的私有成员不加前缀
如
var t = (function(){
	function _a(){}
	return {
…
}
}());

function A(){
	function _get(){}
	this.b = function(){}
}

测试describe中的私有成员不加前缀
如：
Describe(“”,function(){
	function a(){}
…
});

* 	参数

（1）函数中定义与形参同名的变量，前面加“_”。如：

	function A(args){
	var _args = null;

	...
}
1* 	文件

	js文件名：

		如果该.js文件中定义了一个类，则以大写开头。如：

		Index.js

		Operate_Boss.js


		如果该.js文件中不是定义了一个类（如var t = {}；或者定义了一个实例等），则以小写开头。如：

		index.js

		operate_boss.js



	js文件包名：

		以小写开头。如：
	
		index

		operate_boss
1* 	接口以I开头。
1* 	接口、抽象类首字母大写。如：

IIterator（接口）
Layer（抽象类）
1* 	命名空间首字母大写。如：

	YYC.Tool

1* 	全局变量全部大写。如：

	SIZE
1* 	常量全部大写，私有常量不加“_”前缀。如：

	FPS
1* 	事件句柄小写。如：

	onload
	onclick
1* 	引号
	首先使用双引号""，然后嵌套时再使用单引号''
1* 	变量申明与初始化放在函数开头。如：

	_loadImg: function () {
            var img = null,
                i = 0,
                len = this._images.length,
                self = this,
                image = null;

	函数体...
	}
1* 	for循环，在括号里定义i的初始值（即时已经在变量i申明时已经初始化了！）（因为我不习惯看到：for(;i < len;i ++)）的形式！）。如：
	var i = 0,
            len = this._images.length;

            for (i = 0;i < len; i++) {
		...
	    }				
2* 	枚举变量首字母大写，key全部大写，value从0开始。如：
var State = {
	OPEN: 0,
	CLOSE: 1
}
2* 	配置信息属性最后一部分大写。如：
WIDTH: 50,
speed: {
            SLOW: 1,
            NORMAL: 2,
            FAST: 5
        }
2* 	一行代码太长时，需要换成多行显示，此时应将操作符换行。
如下所示：
var str = “a”
+ “b”
+ ”c”; 
var result = true
&& true;

var t = a.push()
.concat()
.when()

逗号不需要换行。
如：
a.when(function(){
},
function(){
});


Webstorm
文件包名小写
Node.js
* 	文件包名
** 小写
** 用“_”隔开
如：gulp_plugin
* 	文件名与js一样的规则
如 驼峰命名
* 	在文件最开始的地方require文件
Javascript 测试
* 	callArgWith调用应该与验证方法放到一起
错误：
            it("测试", function () {
                sandbox.stub(tab, "name", "tab");

                tab.getAndShowFirstLevelChart("20140720");
                fakeChart.draw.callArgWith(1, "tabB");
                
                expect(fakeChart.draw.callCount).toEqual(1);
            });
正确：
            it("测试", function () {
                sandbox.stub(tab, "name", "tab");

                tab.getAndShowFirstLevelChart("20140720");

                fakeChart.draw.callArgWith(1, "tabB");
                expect(fakeChart.draw.callCount).toEqual(1);
            });
* 	用function定义函数，用var定义变量，且变量在函数之前定义。如：
	
	var t = 1;

	function a(){
		xxx
	}
* 	产品代码中的测试方法需要加上前缀“forTest_”。如：
namespace("YE").Director = YYC.Class({
        ...
        Static: {
           ...
            //*供测试使用

            forTest_clearInstance: function () {
                _instance = null;
            },
            forTest_getGameStatus: function () {
                return GameStatue;
            }
        }
});
Asp.net MVC
* 	文件包名大写，Scripts中的文件包、js文件包的名称小写。如：

	Content -> Css

	Scripts -> bomber

	jquery-* * js
* 	Content中的资源名小写。如：

	Content -> Css -> index.css
	Content -> Image ->　index.jpg
* 	项目名大写。如：

	Help
	JavascriptTest



