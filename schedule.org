* 1.0.0
** DONE render worker(7d)
CLOSED: [2018-07-09 Mon 08:00]
*** worker->init, loop
*** no worker
*** user can add job

** DONE texture(4d)
CLOSED: [2018-07-09 Mon 08:00]
*** basic texture
**** TODO show texture
**** TODO load texture
**** TODO support hot load texture
*** diffuse, specular texture

** DONE load .wd(7d)
CLOSED: [2018-07-09 Mon 08:00]
*** add transform->rotation, scale
*** load .wd(refer to glsf 2.0)
*** data-oriented
*** converter
**** .obj



** DONE event (4d)
CLOSED: [2018-07-09 Mon 08:00]
*** pc event
*** mobile event

** TODO picking(2d)

** TODO camera(2d)

*** ortho camera


*** arcball camera controller








*** fly camera controller





** TODO mobile(3d)
*** TODO Multiresolution adaptation


*** TODO add mobile render pipeline


** DONE [#A] UI
CLOSED: [2018-08-07 Tue 10:26]


*** TODO 2d UI
**** TODO loading ui

***** TODO support custom loading ui

*** TODO 3d UI





*** TODO advanced
**** TODO extend ui


*** TODO add stop loop
should not stop ui loop logic!!!





** TODO publish
*** TODO use gzip, cdn, indexDB
https://www.davrous.com/2014/05/21/why-and-how-we-migrated-babylonjs-com-to-microsoft-azure/

https://www.davrous.com/2013/09/24/using-indexeddb-to-handle-your-3d-webgl-assets-sharing-feedbacks-tips-of-babylon-js/


*** TODO demo
https://www.davrous.com/2016/02/05/discovering-sponza-by-babylon-js-and-sharing-tips-on-how-to-build-a-cross-platforms-webgl-game/


* 2.0.0

** plan
- script
 




- extend
custom material/shader
extend no material shader
custom component
editor extend
...





create github repo to host


user can write extend by reason/js


user can send extend to repo according to editor
(need auto check before send that whether it can work)

user can get extend from repo according to editor





user's extend is related to his account




(need refactor editor->rotation gizmo)




- webgl2
glsl 3.0
ubo
vao




- defer shading



- pbr


- support mobile



** Main Point
*** Editor
- publish
- multi player
- extend

*** Engine
- webgl2
- extend



*** Server
- host projects online
 


- based on github(host public)(free)
host project repo in github


- host privately(need charge)


*** Store
package(.zip)
asset(.asb)
extension(editor extension, engine extension)
service?
(based on microservice?)

- based on github(host public)(free)

host goods repo in github



- host privately(need charge)



*** Tool
**** online converter



*** Service
support service to user
(
refer to unity->service:
https://unity3d.com/cn/services
)

- converter service

e.g. convert fbx,obj to wdb/glb(need send fbx data to server)





- multi player service
- analytics
...







*** Account
associated with github?:
can use github account to logic
user can use github api to write extensions




*** All
- ci/cd
- code review



** TODO improve 
*** TODO feat: select texture asset:can continue select

*** TODO feat(inspector canvas): texture inspector add canvas show:
basic source texture
cubemap texture


** DONE [#A] script component
CLOSED: [2019-06-27 Thu 09:27]
http://docs.cocos.com/creator/manual/zh/scripting/

now one script is one component(the type is user script component)

editor should show it in inspector(the component name should be defined by script json)

one gameObject can has multiple user script components(only has one? or has multiple?):
declare properties(can be show and edit in editor)

implement interface functions(.rei), e.g.:
onDispose
...



refer to:
https://developer.playcanvas.com/en/user-manual/scripting/




*** TODO for stream load
**** TODO support load and exec script before or after loading


**** TODO support user provide specific script which will be executed before loading


*** TODO add life script componnet

name(be unique)



how script define properties to state?




one gameObject can has multiple user script components
define priority?





////load script



add script(name, source) by script source string







**** TODO declare attributes for editor
provide getScriptAttribute(scriptName, attributeName, state), setScriptAttributeDefaultValue(scriptName, attributeName, value, state) api for editor

(getScriptAttribute can get attribute data)
(setScriptAttribute should set default value)



add resetScriptAttributes(scriptName, state) for edtor->stop


***** TODO Attribute types
refer to https://developer.playcanvas.com/en/user-manual/scripting/script-attributes/

When you declare an attribute you also declare the type of the attribute. This allows the editor to show the relevant
controls for you to edit the attribute.   


gameObject
boolean, number, string, json
(rgb, rgba, vec2, vec3, vec4, curve, enum)
////asset



*** TODO feature
add findGameObjectsByName?



*** TODO support import other script
http://docs.cocos.com/creator/manual/zh/scripting/modular-script.html




find by script name?

all script data are in state




*** TODO run test
**** TODO reason script


**** TODO js script


*** TODO rewrite demo/e2e test
use script component instead of job script



*** TODO editor
**** TODO for editor->"edit and run" feature

should invoke editor exposed api instead of directly invoke engine's api!
(
because if user add box in script, should update ui(e.g. scene tree)!
)



**** TODO declare properties for editor
在组件脚本的编写过程中，你可以通过声明属性，将脚本中需要调节的变量映射到 属性检查器（Properties） 中，供策划和美术调整。




**** TODO script is asset



**** TODO hot load
https://developer.playcanvas.com/en/user-manual/scripting/hot-reloading/

https://developer.playcanvas.com/zh/ukser-manual/introduction/


http://flaxengine.com/blog/flax-facts-16-scripts-hot-reload/


add swap function:
////save old one's attributes to new one;

editor has "save script" button, if click it, replace script;




if has no swap function, not hotloaded



The initialize method of the script is not called again. Instead the old script instance is passed into the swap method
and it is up to the developer to ensure that the state of the old script is copied into the new one.


Declared script attributes are automatically copied over into the new script instance.



It is also important to remove any event
listeners from the old instance and re-attach them to the new one. 



**** TODO not error if script throw error
catch script->throw error, show error info in console


*** TODO import and export wdb
**** TODO support script component
export attributes:
default value



/*
export all script string to one script file
wdb->script components remain: name, url
*/

export script string into wdb?




***** TODO wdb

***** TODO generate










** TODO [#B] collider
*** TODO use do
remove geometryPointDataBufferCount
add colliderDataBufferCount?


*** TODO optimize
not judge "is transform" to compute aabb!!!
(because user should invoke "compute aabb" function by themself when change transform!!!)



*** TODO box collider



*** TODO sphere collider
**** TODO add sphere geometry



*** TODO mesh collider



*** TODO add collide script handle(collide script component)



*** TODO import and export wdb




*** TODO run test
**** TODO gameObject collide with gameObject

**** TODO camera collide with model









** TODO [#C] picking
*** TODO add event script component
**** TODO add getXXXEventXXX for js script



*** TODO import and export wdb






** TODO [#A] skybox

** date
2018.10.16

total
5.5小时

剩825.5h

morning
2小时

afternoon
3.5小时

evening
0小时



summary
1.begin add material test
TODO [#A] reduce engine file size

- package different .wd?
can exclude not used pipelines/jobs code?


- es6 import, then build by rollup


*** TODO package
user give job handle map(import used job files) 


custom job:
invoke service api




**** TODO use reason



**** TODO use js


**** TODO editor support package









** TODO [#A] add pbr
https://seblagarde.wordpress.com/2015/07/14/siggraph-2014-moving-frostbite-to-physically-based-rendering/

*** TODO [#A] add pbr material
https://zhuanlan.zhihu.com/p/21376124

https://learnopengl.com/PBR/Theory

https://developer.playcanvas.com/en/user-manual/graphics/physical-rendering/

https://interplayoflight.wordpress.com/2013/12/30/readings-on-physically-based-rendering/

http://bitsquid.blogspot.com/2017/07/validating-materials-and-lights-in.html

https://cesium.com/blog/2017/08/08/physically-based-rendering-in-cesium/
https://github.com/KhronosGroup/glTF-WebGL-PBR


[[https://zhuanlan.zhihu.com/p/25314364][【Unity Shader实践】基于MatCap实现适于移动平台的“次时代”车漆Shader]]




[[https://gamedev.autodesk.com/blogs/1/post/2287972226151420438][Validating materials and lights in Stingray]]

[[https://gamedev.autodesk.com/blogs/1/post/5917432056362215813][Physical Cameras in Stingray]]



https://zhuanlan.zhihu.com/p/28827026


https://zhuanlan.zhihu.com/p/20091064


**** TODO add pbr material



**** TODO fix .wd by using pbr instead of brdf

**** TODO .wd: support texCoord_1, ...

**** TODO add IBL

**** TODO pbr in mobile
https://www.zhihu.com/question/62965225











*** TODO [#A] remove basic material


*** TODO [#C] add pbr light

*** TODO [#C] add pbr camera
https://placeholderart.wordpress.com/2014/11/16/implementing-a-physically-based-camera-understanding-exposure/






** TODO [#A] shadow

** TODO [#A] advanced ci/cd
*** DONE use ci for deploy and pf(performance) test
CLOSED: [2018-01-06 Sat 17:53]
write gulp task

ci test pf:
allow fail
deploy to github(ci pf data json):
    not pass pf test



use build stages:
parallel job(e.g. test)







refactor:
wonder-benchmark: add "local" folder for data json files



main branch:
master, test, dev

dev push: unit test
no deploy

test push: unit test + pf test(all must pass)
deploy to test environment(on tag)

master push: unit test + pf test(all must pass)
deploy to produce environment(on tag)
deploy to github release(on tag)(file: wd.js)





(in test branch)
deploy to test/pre-pubilish environment:
should pass all test(pf,unit test)

deploy to AWS Lambda?
(user can run engine example online)



(in mater branch)
deploy to produce environment


*** TODO add publish to page gulp task
add task


add to bumped


*** TODO auto run render test and pf test in every day
send report email to developer


*** TODO auto generate samples from render test/pf test
render test



pf test









**** TODO ci deploy samples to github page?





*** TODO improve ci->pf test
cache benchmark;

reduce pf test case test time;


*** TODO test in diferent browser/mobiles
https://www.browserstack.com/automate









* 3.0.0
** Main Point

*** Editor
- more editor?
- support more engine functions
*** Engine
- optimize
- more main functions





** TODO [#B] job script, data json

*** TODO data json
open/close worker setting



**** TODO user can change setting.json->buffer
1.editor->engine->setting.json
2.publish->engine->setting.json





*** TODO editor: support edit config json

*** TODO job
**** TODO fix bug:
action->before not worker???
**** TODO support import/export job script
***** TODO wdb

***** TODO generate


**** TODO support worker
















** TODO [#A] learn and support webgpu?
so support webgl1, webgl2, webgpu at same time?


https://www.youtube.com/watch?v=K2JzIUIHIhc

https://github.com/gpuweb/gpuweb/wiki/Implementation-Status

https://doc.babylonjs.com/extensions/webgpu




** TODO [#A] extend

*** TODO 支持用户扩展
**** TODO editor
editor extend script, store in .wet file?


***** TODO ui
json?

reason?
(dynamic compile?)



***** TODO asset
refer to https://blog.csdn.net/LIQIANGEASTSUN/article/details/50510615





**** TODO engine
engine extend script, store in .wet file?


***** TODO job


***** TODO shader


***** TODO component


***** TODO service







*** TODO extend ui
**** TODO extend imgui


*** TODO extend files











extend material(? material asset?), shader(.glsl), job(.js), script(.js), config data(.json->./Wonder.js/data/ json files)


extend service(.js?)





add config(.json) to specific the file structure in project file(.wd_project_package)





*** TODO extend import/export package(.wdb, .asb)
e.g. if extend component, should also extend import/export!



*** TODO add .etb for extension?




*** TODO use .wonder_extend_package package(zip file) to include all extend files

include asset:
e.g.:
.wd
.bin
...









*** TODO extend render config

**** TODO improve shaders.json->branch(static_branch)
remove static_branchs, change to:
        {
          "type": "static_branch",
          "name": "modelMatrix_instance"
        },


add Shaders.re->addBranchHandle api, user can register handle after load(e.g. wd.addBranchHandle("modelMatrix_instance", function(xxx){...}))


**** TODO add custom material+custom shader
***** TODO custom glsl can support instance



**** TODO add custom no material shader
**** TODO user can write own .glsl can register to npm
modify render config(shader config json?), support build npm->glsl to ShaderChunk.ts?





**** TODO extend material
user can add custom material, custom glsl, custom shaderLib_generate, custom render module(like defer, front render
module/system)
////(but how to handle render worker?)


user can edit shaders.json, shader_libs.json(e.g. add condition limit so that use one shader lib when in mobile, use
other one when in pc)




**** TODO extend glsl

***** TODO glsl use require,include?
@bhouston what about a custom webpack loader for the glsl files instead of using the raw-loader? The loader could take care of recursively resolving any #include lines in the root shader file. Any shader could be required in with e.g.:

var vert = require('three-glsl!../shaders/my-shader.vert')
var frag = require('three-glsl!../shaders/my-shader.frag')
just a thought








*** TODO extend component
/*
user can write local/public component

add wonder_component_config.json, add "components" field.
e.g.
{
components:[
"wonder-component-aaa"
]
}

wonder should read this field and register it


public component:
(refer to typescript=>d.ts)
user should send it to public github repository
in ci, it will check and run unit test

after pass ci and merge it, it will be published to @wonder-components/xxx npm package 
*/


e.g. user can add (XxxCameraController component)



**** TODO add custom component
declare properties(can be show and edit in editor)



implement interface functions(.rei), e.g.:
update
dispose
clone
add
...
( component add and implement .rei)



how to add component data to state???



accept function string which is inputed from editor!
use "new Function"?


can use job for manage custom component(e.g. add "updateXXX" for update logic)
*** TODO work in editor
work in editor


work with editor ->extension ui component?
*** TODO solve how to extend by user:(refer to unity)


how to write own component
how to write own extension(material)
build component repository?















** TODO [#B] add physics
http://www.html5gamedevs.com/topic/33392-whats-your-prefered-physics-engine-these-days/

https://github.com/lo-th/Oimo.js/

use Oimo?
because its performance is better than cannon.js

e.g. worker example

Oimo:
2000 gamgObjects:
physics worker: 16ms


Cannon:
2000 gamgObjects:
physics worker: >100ms



*** TODO use web worker



** TODO [#B] Voxel
https://interplayoflight.wordpress.com/2015/04/08/the-rendering-technology-of-skysaga-infinite-isles/
*** TODO voxel terrain
https://www.youtube.com/watch?v=51JNyjBcDMo

https://forum.unity.com/threads/terrainengine-voxel-terrain-smooth-cubic-2d-hexagonal-infinite-procedural-terrain.174595/

https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch01.html


marching cube
destruct, dig hole
lod
multi materials(multi layer)

voxel billboard?(for tree, grass)

triplanar mapping




*** TODO voxel model(which can be destruct)(static?)
marching cube

**** TODO generate a new uv map of a new polygon model generated by a voxel model(marching cube?) which can map the same texture of the origin polyon model's
voxel farm:

http://procworld.blogspot.com/2016/05/applying-textures-to-voxels.html
***** We had to write voxelization routines that captured the UV data with no ambiguities.



***** we had to make sure our dual contouring methods could output the UV data back into triangle form.

The realtime compression had to be now aware of the UV space, and remain fast enough for realtime use.
And last but not least we knew voxel content would be edited and modified in many sorts of cruel ways. We had to understand how the UV data would survive (or not) all these
transformations. 

***** internal voxels do not have UV info, but a regular material that is exposed when the surface voxels are gone.
***** Only the surface voxels have UVs.






Rethinking Texture Mapping:
http://www.cemyuksel.com/courses/conferences/siggraph2017-rethinking_texture_mapping/rethinking_texture_mapping_course_notes.pdf



volume-encoded-uv-maps
http://vcg.isti.cnr.it/volume-encoded-uv-maps/volume-encoded-uv-maps.pdf
http://vcg.isti.cnr.it/volume-encoded-uv-maps/volume-encoded-uv-maps_additional.pdf
http://vcg.isti.cnr.it/volume-encoded-uv-maps/



tileTrees
https://www-sop.inria.fr/reves/Basilic/2007/LD07/LD07.pdf
https://www-sop.inria.fr/reves/Basilic/2008/DL08/



octree texture
http://www.antexel.com/sylefeb/octreetex/
http://www.cs.jhu.edu/~misha/ReadingSeminar/Papers/DeBry02.pdf
http://www.cs.jhu.edu/~misha/ReadingSeminar/Papers/Benson02.pdf



Examining Automatic Texture Mapping of Arbitrary Terrains: https://www.diva-portal.org/smash/get/diva2:422722/FULLTEXT01.pdf


should learn from book:
《TEXTURING And MODELING A Procedural Approach》


polycube map:
http://vcg.isti.cnr.it/polycubemaps/


Perfect Spatial Hashing:
http://hhoppe.com/perfecthash.pdf
https://github.com/Jinxit/psh




need study:
Unified Texture Management for Arbitrary Meshes: http://evasion.inrialpes.fr/Publications/2004/LDN04/RR-5210.pdf






***** TODO references
https://emnh.github.io/rts-blog/2017/04/25/10_voxelization.html
Examining Automatic Texture Mapping of Arbitrary Terrains: https://www.diva-portal.org/smash/get/diva2:422722/FULLTEXT01.pdf


**** TODO construct examples in game
In Infinity: Battlescape, we designed our space stations, bases and factories to be modular. This means that we model &
texture independant modules, which can get attached together in various configuration layouts. Here's one of such
layouts for a space station: https://www.gamedev.net/blogs/entry/2262351-patch-0160-screenshots/

https://www.youtube.com/watch?v=DQg6mpjQMRo&feature=youtu.be














** TODO [#A] add cull

https://gamedev.autodesk.com/blogs/1/post/353597490642337181

https://www.slideshare.net/DICEStudio/culling-the-battlefield-data-oriented-design-in-practice


in do way:
use array instead of octree?



each gameObject(meshRenderer) support not join cull:
judge whether has collider component?


instance:
static instance can only be all culled
dynamic instance can cull each instance

////*** TODO use webassembly???(or not!?)
use arraybuffer to store render data!?

fall back to js version





*** TODO use web worker for sort and cull





**** TODO move create_basic_render_object_buffer, sort, cull to new worker: cull


main worker state->gameObjectRecord->component maps should be sharedArrayBuffer data?

or send component data (get from component maps) to worker?



**** TODO dispose should defer 2 frame instead of defer 1 frame!



**** TODO support add/remove cull worker job


*** TODO Frustum culling
Calculating the objects that exist between the camera near and far plane.



*** TODO add Occlusion culling?
Occlusion culling: Calculating which objects are hidden behind other objects and excluding them from rendering.

refer to unity->https://docs.unity3d.com/Manual/OcclusionCulling.html



** TODO [#A] sort by shader,geometry group, texture

*** TODO optimize sort render command(WebglRenderer.ts)
use radix sort?

refer to:
https://www.byvoid.com/zhs/blog/sort-radix
http://www.dataorienteddesign.com/dodmain/node10.html


use web worker to parallel sort:
It is possible to make this last stage of the process parallel by having each sorter ignore any values that it reads
that are outside its working set, meaning that each worker reads through the entire set of values gathering for their
bucket, but there is still a small chance of non-linear performance due to having to write to nearby memory on different
threads. During the time the worker collects the elements for its bucket, it could be generating the counts for the next
radix in the sequence, only requiring a summing before use in the next pass of the data, mitigating the cost of
iterating over the whole set with every worker. 

If your data is not simple enough to radix sort, you might be better off using a merge sort or a quick sort, but there
are other sorts that work very well if you know the length of your sortable buffer at compile time, such as sorting
networks. Through merge-sort is not itself a concurrent algorithm, the many early merges can be run in parallel, only
the final merge is serial, and with a quick pre-parse of the to-be-merged data, you can finalise with two threads rather
than one by starting from both ends (you need to make sure that the mergers don't run out of data). Though quick sort is
not a concurrent algorithm each of the sub stages can be run in parallel. These algorithms are inherently serial, but
can be turned into partially parallelisable algorithms with O(log n) latency. 



Multi-threaded sorting: Each command bucket can be sorted independently, in parallel.



** TODO [#A] animation
*** TODO [#A] skin animation
**** TODO data oriented

*** TODO [#A] articulated animation






** TODO [#C] add tag



** TODO [#A] advanced asset
add asset script
(refer to unity->AssetPostProcessor:

https://www.cnblogs.com/dongliang/archive/2012/09/25/ModelImporter.html
https://zhuanlan.zhihu.com/p/27438791
https://docs.unity3d.com/ScriptReference/AssetPostprocessor.html

)



** TODO [#A] audio
https://dev.opera.com/articles/drum-sounds-webaudio/
https://www.davrous.com/2016/05/27/tutorial-creating-a-small-8-bit-responsive-drum-machine-using-web-audio-svg-multi-touches/


use web audio?

store in arraybuffer in wdb?
https://www.clicktorelease.com/blog/loading-sounds-faster-using-html5-web-audio-api/


** TODO [#A] compressed texture
https://cesium.com/blog/2017/02/06/texture-compression/



** TODO [#C] stream scene
https://stackoverflow.com/questions/25823729/large-3d-scene-streaming

https://forum.unity.com/threads/thoughts-on-scene-streaming.503392/

https://www.sectr.co/stream.html
https://www.sectr.co/uploads/2/5/7/9/25793991/sectr_stream_quickstart.pdf


** TODO [#B] add msaa
affect re state



** TODO [#B] advanced run/stop
*** TODO support run in new tab
*** TODO support commit changes in run?
https://answers.unity.com/questions/43972/how-do-i-commit-changes-in-test-mode.html




** TODO [#C] advanced gizmo
*** TODO feature: fix imgui->z order
add 3d mode(vs 2d mode)?

3d mode use billboard gameObject, 2d mode use imgui???

refer to unity->gizmo:
https://docs.unity3d.com/Manual/GizmosMenu.html#GizmosIcons

* 4.0
** TODO [#A] multiplayer
https://developer.playcanvas.com/en/tutorials/real-time-multiplayer/



* more

** TODO [#C] finish book draft
take about 60 days to finish




** DONE [#B] dynamic load asset
CLOSED: [2019-06-04 Tue 20:31]

refer to unity->AssetBundle:
https://docs.unity3d.com/Manual/AssetBundlesIntro.html
http://gad.qq.com/article/detail/10033








** TODO advanced debug

*** TODO show debug info
setting.json add:
debug: {
    open_contract_check: true,
    show_debug_info: true
}



show worker, main fps


show worker, main memeory


show total fps,render time


show each job's render time, memory


*** TODO can log error,fatal state json data(when open debug). we can reproduce the bug by the json data!!!





** TODO schedule frame rate(define in json config)
**** TODO can specify fps 
e.g.
keep 60/40/30 fps

**** TODO can specify worker fps 
e.g. 
main worker: 1 frame sync(must sync at each frame)
render worker: 2 frame sync
physics worker: 1 frame sync
xxx worker: 3 frame sync


** TODO e2e test for multi thread




** TODO [#C] add ray tracing pipeline

refer to DXR: 
https://blogs.msdn.microsoft.com/directx/2018/03/19/announcing-microsoft-directx-raytracing/
https://www.zhihu.com/question/269149582
https://devblogs.nvidia.com/introduction-nvidia-rtx-directx-raytracing/



** TODO [#B] optimize
*** TODO compress typeArrays
e.g. Texture typeArray->wrapS, wrapT, ... should share the same Uint8Array with different value range




** TODO [#C] advanced asset
*** TODO support gltf extensions
https://github.com/KhronosGroup/glTF/tree/master/extensions



*** TODO convert .wd to .gltf
**** TODO fix share material but not share geometry!
(node->extension->material)


*** TODO [#A] add more data in .wd
add:
clone
instance
...



**** TODO material add side




*** TODO optimize generate wd
when generate wd->generate gltf, add extended data:
geometry type(box, customGeometry)


not add box geometry data to buffer!





*** TODO add AssetDatabase to support aync load asset
(move out to be a project in wonder group?)

*** TODO use backgroup task api
https://developer.mozilla.org/en-US/docs/Web/API/Background_Tasks_API











*** TODO [#B] write fbx python sdk converter
refer to wonder, claygl


use 2019.1 python sdk


should export light data



** TODO [#C] advanced animation
*** TODO skin optimize
**** TODO use blender to build skin animation


fix yuan bao problem:
the animation and the static model's rotation is not the same!(animation has rotate(0,-90,0)!)
(
gltf is correct(monster is correct)(by compare with threejs)

but fbx is wrong!(xsi_man_skinning.fbx)(compare with threejs=>webgl_loader_fbx.html)
maybe the bind shape matrix is wrong? need parse!?
# parse bind shape matrix:
# http://www.gamedev.net/topic/574309-solved-fbx-animation-problems/
# refer to babylonjs=>SkinInfo.cpp=>bindPoses ?)




**** TODO support multi animations in one fbx
pass fbx=>converter=>multi skin animations!:
use blender to add multi animations of one model in one .fbx file
learn how to separate and combine character and its props animations!


**** TODO optimize skin
https://engineering.riotgames.com/news/compressing-skeletal-animation-data




fbx:
  parse bind shape matrix:
  http://www.gamedev.net/topic/574309-solved-fbx-animation-problems/
  refer to babylonjs=>SkinInfo.cpp=>bindPoses ?




optimize: 
not update tranlation,scale(pre handle key frame data)



write to texture:
judge vertex texture


//add basic optimize


add render test


optimize: 
//if bindShapeMatrix is identify, set it null and not multiply

other "todo" optimizes


optimize:
query max uniform data arr count



compute in gpu
1) Make sure that the size of the bones array is correct. Often times, you will find that part of the mesh is skinned fine while the other parts are not skinned correctly. If so make sure the size of the bones array is correct.  

There are two things that you have to be careful about.





**** TODO publish


*** TODO optimize skeleton animation
把所有不同的角色的骨骼相关的矩阵和变换信息写入到纹理里(refer to playcanvas, threejs)
(fallback:if not support vertex texture, pass uniform data instead)
http://ftp.opengpu.org/forum.php?mod=viewthread&tid=18164&extra=page%3D1

http://http.developer.nvidia.com/GPUGems3/gpugems3_ch02.html

https://github.com/mrdoob/three.js/issues/3187


use Skinned Instancing

use quaternion for rotate skeleton



**** TODO not update no-render gameObjects' skeleton


*** TODO support animation blend

**** TODO publish

*** TODO support animation control(using action to control)
refer to unity:
https://docs.unity3d.com/Manual/AnimationSection.html



support time limit logic(e.g. isTimeExceed5000)

support frame control

**** TODO refactor:extract AnimationEngine and move out to be a new project

**** TODO publish




*** TODO morph animation



** TODO [#C] add action component





** TODO [#C] advanced transform
*** TODO optimize quaternion
四元数的压缩存储
https://blog.codingnow.com/2017/11/quaternion_compress.html#more

https://www.gamedev.net/forums/topic/461253-compressed-quaternions/



** TODO [#C] advanced event
*** TODO support more touch event
**** TODO touch->point event support pointscale event



** TODO [#C] advanced camera
*** TODO fly camera controller
use pointer lock:
https://www.zhangxinxu.com/wordpress/2017/10/js-api-pointer-lock/



*** TODO advanced arcball camera controller
support keydown-> multiple keys
e.g. press a,w can move left-up


** TODO [#C] Machine Learning
https://unity3d.com/cn/machine-learning


** TODO iap
Unity IAP makes it easy to implement in-app purchases in your application across the most popular App stores.
https://blogs.unity3d.com/cn/2018/03/18/3-ways-to-make-more-money-with-unity-iap-promo/
https://docs.unity3d.com/Manual/UnityIAP.html




** TODO job script, data json

*** TODO data json
open/close worker setting



**** TODO user can change setting.json->buffer
1.editor->engine->setting.json
2.publish->engine->setting.json





*** TODO editor: support edit config json

*** TODO job
**** TODO fix bug:
action->before not worker???
**** TODO support import/export job script
***** TODO wdb

***** TODO generate





*** TODO job(or all data) support hot loading
setting.json add:
debug: {
    ...,
    hot_update_data: true
}



add isDirty flag

in each frame
    if dirty, re-generate job graph

*** TODO user can add/remove job
**** TODO support before/after nth job(to solve "has multiple source jobs" problem)


**** TODO worker
***** TODO support user add/remove worker job(in render/cull/... worker)

////***** TODO support user added worker job to new worker

add worker pool



window.navigator.hardwareConcurrency

make sure only hardwareConcurrency jobs can be used(in each worker)!else jobs should be wait




////***** TODO support add worker job at runtime(can add to different/new worker)

















** TODO [#B] advanced ui
*** TODO [#A] advanced imgui
**** TODO more controls
https://docs.unity3d.com/Manual/gui-Controls.html

**** TODO layout
https://docs.unity3d.com/Manual/gui-Layout.html

***** TODO auto layout

**** TODO custom style
https://docs.unity3d.com/Manual/gui-Customization.html

**** TODO extend
https://docs.unity3d.com/Manual/gui-Extending.html

***** TODO use can write custom controls?
add your own custom drawing functions 


**** TODO optimize
***** TODO use sissor


*** TODO [#B] rmgui(retain mode gui)

*** TODO [#C] compress buffer data
refer to http://ourmachinery.com/post/ui-rendering-using-primitive-buffers/



*** TODO [#C] single draw call?
http://ourmachinery.com/post/one-draw-call-ui/






*** TODO [#C] advanced data oriented
////**** TODO setting.json->buffer->geometry support multi section config
e.g. 
"buffer": {
  "geometry": {
    "section1": {
            "geometry_point_count": 20000000,
            "geometry_count": 100,
    },
    "section2": {
            "geometry_point_count": 100000,
            "geometry_count": 1000,
    },
    ...
  }
}

* 4.0.0

** TODO add ray trace demo
*** TODO implement path trace in webgl2 (one pixel one ray)
**** TODO basic
***** TODO path tracer in cpu
//refer to <<ray trace in one week>>, ...

implement:
//add two spheres, one ground sphere
////add light
//add texture



cornell box:
one box
one sphere

translate




texelFetch?

glsl 3.0:
layout



pt use webgl2 gpu


***** TODO design

gbuffer


direct


shadow


ao


indirect


reflection


refraction





intersection




sample



accumulation



filter




***** TODO denoise
****** TODO taa

****** TODO Edge-avoiding à-trous wavelet


****** TODO tone mapping


****** TODO svgf
not move sphere



move camera



move sphere


******* TODO without reconstruction filter
learn:
http://cwyman.org/code/dxrTutors/dxr_tutors.md.html


render to gbuffer:
direct, indirect light
position, depth, ...


tone map


demodule + module





******** TODO TAA

hitory buffers?

move vector buffer?




******* TODO with reconstruction filter
******** TODO learn image denoising


******** TODO ...





**** TODO fix bug
***** TODO when sphere move, the texture of the sphere shouldn't move!!!



**** TODO advanced
***** TODO move camera
arcball camera


fly camera



***** TODO skybox
https://zhuanlan.zhihu.com/p/37040545


***** TODO model
https://zhuanlan.zhihu.com/p/37177546



***** TODO model transform
translate

rotate

scale


***** TODO add bvh




***** TODO learn and implement
[[http://www.realtimerendering.com/raytracing/Ray%2520Tracing_%2520the%2520Rest%2520of%2520Your%2520Life.pdf][Ray Tracing: The Rest of Your Life]]

[[https://www.cnblogs.com/lv-anchoret/p/10327692.html][【RAY TRACING THE REST OF YOUR LIFE 超详解】 光线追踪 3-1 蒙特卡罗 (一)]]



****** TODO learn more
https://www.scratchapixel.com/



http://www.raytracegroundup.com/index.html

https://blog.csdn.net/libing_zeng/article/details/72625390



***** TODO support pbr material



**** TODO optimize
***** TODO use compute shader



*** TODO add to engine


*** TODO upgrade reason && bs-platform(to 5.x)


*** TODO publish v1.2


*** TODO write blogs
<<implement path trace in webgl>>



*** TODO optimize
refer to Deferred Hybrid Path Tracing:
http://on-demand.gputechconf.com/gtc-eu/2017/presentation/23026-thomas-schander-real-time-path-tracing-using-a-hybrid-deferred-approach.pdf
http://www.realtimerendering.com/raytracinggems/unofficial_RayTracingGems_v1.5.pdf -> Deferred Hybrid Path Tracing

http://www.thomasschander.com/



ray trace in screen space(ss):
http://www.thomasschander.com/2016/01/08/screen-space-cubemap-occlusion/
http://www.thomasschander.com/2016/05/21/screen-space-acceleration-structure/





***** TODO optimize ads
https://www.scratchapixel.com/lessons/advanced-rendering/introduction-acceleration-structure




bvh:
two-level BVHs, where a large number of BVHs, usually one per object, are sorted into a top-level BVH. 


stackless



optimize bvh?
https://www.highperformancegraphics.org/wp-content/uploads/2017/Papers-Session2/HPG2017_EfficientIncoherentRayTraversal.pdf
https://ingowaldblog.files.wordpress.com/2018/06/paper.pdf





use Irregular Grid?
https://dl.acm.org/citation.cfm?id=3129019




use svo?gpu voxelization?
https://www.zhihu.com/question/269610419
https://developer.nvidia.com/gvdb
https://on-demand.gputechconf.com/siggraph/2016/presentation/sig1664-rama-hoetzlein-rendering-gvdb-sparse-volumes-designworks.pdf
https://sergeneren.com/2019/05/02/integrating-gvdb-future-plans/




***** TODO more...



sort ray

bidirection path trace

梅特波利斯光照传输，以及光子映射

那么这三种方法能不能被组合在一起呢，答案当然是可以的，因为上述每一种方法都是一种路径采样的方法，让我们得到一个样本时，我
们能够按照复合重要性采样的思路把他们全部组合在一起，这样我们的整个渲染流程就有了一个统一的算法架构。  



因此路径采样的另一个方向是分析图像的频率分布，使得我们仅需要对高频的区域适应更密集的路径样本，而在平滑的区域减少路径采样
的样本，这种方法显然能够大大提高路径追踪的效率。:


...




*** TODO improve denoise
**** TODO a-svgf


**** TODO beyond svgf



**** TODO BLOCKWISE MULTI-ORDER FEATURE REGRESSION FOR REAL-TIME PATH TRACING RECONSTRUCTION
http://www.tut.fi/vga/publications/Blockwise_Multi-Order_Feature_Regression_for_Real-Time_Path_Tracing_Reconstruction.html




*** product
http://raytracey.blogspot.com/2019/06/lighttracer-first-webgl-path-tracer-for.html



*** apply situation
online e-commerce stores offering their clients a fully photorealistic preview of an article (be it jewellery,  cars,
wristwatches, running shoes or handbags):

Up until now, online shops have been trying several ways to offer their clients "photorealistic" previews with the
ability to configure the product's materials and colours. These previews were either precomputed 360 degree videos,
interactive 3D using WebGL rasterization and even using server-side rendering via cloud based ray tracing streamed to
the browser (e.g. Clara.io and Lagoa Render) which requires expensive servers and is tricky to scale. 






make film in web


...



*** advantage 
web vs pc, offline render

https://www.zhihu.com/question/28694086/answers/updated

https://www.zhihu.com/question/29977669/answers/updated



in web:

LightTracer:
https://www.youtube.com/watch?v=DZ01nne5Q50
LightTracer uses normal OpenGL - not even proper WebGL. The raytracer was written in C and auto-converted to JavaScript using emscripten.
There's no support for any special hardware features whatsoever. I'm also not sure how RT core support would work in
general - there's just so many different was to implement raytracing and NVIDIA doesn't say anything about what RT cores
actually do ... 









path tracer vs ray tracer in unreal:
For artists and programmers, the unbiased nature of the Path Tracer’s ground truth image makes it invaluable to have
built right into the Engine for comparison. It also removes the need for additional third-party software or plugins to
generate these comparison results. For artists, it means being able to fine-tune materials and lighting setups more
quickly. For programmers, it improves workflow and iteration times when tuning and validating the look of their
real-time algorithms for techniques like Denoising. 

https://docs.unrealengine.com/en-US/Engine/Rendering/RayTracing/PathTracer/index.html



*** improve

use path tracer or hiby ray trace?




path tracer in webgl2


improve fps
improve ray count
(multi thread for ray trace?, move to gpu, use web gpu...)




big scene:
(use normal map + ray trace, lod, ...)
outdoor scene: voxel terrain, water, ...



make animation film:
Enscape2.2版本制作动画非常直观方便，通过设置关键帧的方式来设定动画路径，并且可以在关键帧调整日照时间、镜头景深和广角参数
做成动画效果展示可以将文件快速打包成exe格式，直接发给甲方无需安装其他软件就可直接开启展示全方位模型效果； 







support more materials:
pbr, vray material, ...



Volumetric path tracing(e.g. render smoke, fog, ...)



work with art editor(e.g. 3d max)



add post process



bake tool by ray trace:
e.g. bake normal map, light map, ...



add defer shading pipeline for render pre-compute scene?
(use baked light map?)





add interaction:
pick
collision
ui
...




procedural approach




extend:
custom glsl
...



*** TODO add demo


*** TODO improve


*** TODO implement voxel cone trace?


*** TODO add to editor?


*** TODO add ray trace pipeline to engine?















** TODO [#C] editor support worker
*** TODO imgui
e.g. support customData for execData


*** TODO script

*** TODO run in worker



* Tool
** TODO webgl inspector which can work with multi thread

* TODO fix
** TODO fix(reallocate): should judge reallocate geometry buffer when set geometry points
*** TODO fix(reallocate): fix engineState


*** TODO fix(reallocate): fix inspectorCanvasEngineState




