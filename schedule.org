* 1.0.0
** DONE render worker(7d)
CLOSED: [2018-07-09 Mon 08:00]
*** worker->init, loop
*** no worker
*** user can add job

** DONE texture(4d)
CLOSED: [2018-07-09 Mon 08:00]
*** basic texture
**** TODO show texture
**** TODO load texture
**** TODO support hot load texture
*** diffuse, specular texture

** DONE load .wd(7d)
CLOSED: [2018-07-09 Mon 08:00]
*** add transform->rotation, scale
*** load .wd(refer to glsf 2.0)
*** data-oriented
*** converter
**** .obj



** DONE event (4d)
CLOSED: [2018-07-09 Mon 08:00]
*** pc event
*** mobile event

** TODO picking(2d)

** TODO camera(2d)

*** ortho camera


*** arcball camera controller








*** fly camera controller





** TODO mobile(3d)
*** TODO Multiresolution adaptation


*** TODO add mobile render pipeline


** TODO [#A] UI


*** TODO 2d UI
**** TODO loading ui

***** TODO support custom loading ui

*** TODO 3d UI





*** TODO advanced
**** TODO extend ui


*** TODO add stop loop
should not stop ui loop logic!!!



* 2.0.0
** Main Point
*** Editor
- publish
- asset store
- server
- multi player
- extend

*** Engine
- webgl2
- extend
  


*** All
- ci/cd







** TODO [#A] support webgl2
*** TODO improve instance
refer to http://www.jiazhengblog.com/blog/2017/03/20/3104/ -> comment:
事实上在 webgl2 当中，可以直接使用 gl.vertexAttribDivisor 来直接完成实例化数组了，


*** TODO defer shading

**** TODO point light
add dirty?


*** TODO vao
optimize: judge last sended vao buffer



*** TODO ubo
*** TODO glsl 3.0

no need to compile!? but need to learn babyonjs compiler firstly!!!
/*
wonder-glsl-compiler should support convert glsl 2.0 to 3.0!!!???

refer to babylonjs(source code):
http://doc.babylonjs.com/features/webgl2#multisample-render-targets
Shaders
When WebGL2 is enabled, the shaders are automatically converted to GLSL v3.0. Babylon.js will then automatically take
advantage of extended instruction/uniform counts. 

*/




*** TODO Occlusion Queries
*** TODO more?







** TODO [#A] reduce engine file size

- package different .wd?
can exclude not used pipelines/jobs code?


- es6 import, then build by rollup


*** TODO package
user give job handle map(import used job files) 


custom job:
invoke service api




**** TODO use reason



**** TODO use js


**** TODO editor support package









** TODO [#A] extend

*** TODO extend files
extend material(? material asset?), shader(.glsl), job(.js), script(.js), config data(.json->./Wonder.js/data/ json files)


extend service(.js?)





add config(.json) to specific the file structure in project file(.wd_project_package)


*** TODO use .wonder_extend_package package(zip file) to include all extend files

include asset:
e.g.:
.wd
.bin
...









*** TODO extend render config

**** TODO improve shaders.json->branch(static_branch)
remove static_branchs, change to:
        {
          "type": "static_branch",
          "name": "modelMatrix_instance"
        },


add Shaders.re->addBranchHandle api, user can register handle after load(e.g. wd.addBranchHandle("modelMatrix_instance", function(xxx){...}))


**** TODO add custom material+custom shader
***** TODO custom glsl can support instance



**** TODO user can write own .glsl can register to npm
modify render config(shader config json?), support build npm->glsl to ShaderChunk.ts?





**** TODO extend material
user can add custom material, custom glsl, custom shaderLib_generate, custom render module(like defer, front render
module/system)
////(but how to handle render worker?)


user can edit shaders.json, shader_libs.json(e.g. add condition limit so that use one shader lib when in mobile, use
other one when in pc)




**** TODO extend glsl

***** TODO glsl use require,include?
@bhouston what about a custom webpack loader for the glsl files instead of using the raw-loader? The loader could take care of recursively resolving any #include lines in the root shader file. Any shader could be required in with e.g.:

var vert = require('three-glsl!../shaders/my-shader.vert')
var frag = require('three-glsl!../shaders/my-shader.frag')
just a thought








*** TODO extend component
/*
user can write local/public component

add wonder_component_config.json, add "components" field.
e.g.
{
components:[
"wonder-component-aaa"
]
}

wonder should read this field and register it


public component:
(refer to typescript=>d.ts)
user should send it to public github repository
in ci, it will check and run unit test

after pass ci and merge it, it will be published to @wonder-components/xxx npm package 
*/


e.g. user can add (XxxCameraController component)



**** TODO add custom component
declare properties(can be show and edit in editor)



implement interface functions(.rei), e.g.:
update
dispose
clone
add
...
( component add and implement .rei)



how to add component data to state???



accept function string which is inputed from editor!
use "new Function"?


can use job for manage custom component(e.g. add "updateXXX" for update logic)
*** TODO work in editor
work in editor


work with editor ->extension ui component?
*** TODO solve how to extend by user:(refer to unity)


how to write own component
how to write own extension(material)
build component repository?













*** TODO [#A] advanced job
**** TODO fix bug:
action->before not worker???
**** TODO support import/export job script
***** TODO wdb

***** TODO generate

















**** TODO extend job
add user job in json
***** TODO user can define job in json, add register job function by js

**** TODO job(or all data) support hot loading
setting.json add:
debug: {
    ...,
    hot_update_data: true
}



add isDirty flag

in each frame
    if dirty, re-generate job graph

**** TODO user can add job
***** TODO worker
****** TODO support user add worker job(in render/cull/... worker)

////***** TODO support user added worker job to new worker

add worker pool



window.navigator.hardwareConcurrency

make sure only hardwareConcurrency jobs can be used(in each worker)!else jobs should be wait




////***** TODO support add worker job at runtime(can add to different/new worker)














** TODO [#A] add pbr
https://seblagarde.wordpress.com/2015/07/14/siggraph-2014-moving-frostbite-to-physically-based-rendering/

*** TODO [#A] add pbr material

*** TODO [#C] add pbr light

*** TODO [#C] add pbr camera
https://placeholderart.wordpress.com/2014/11/16/implementing-a-physically-based-camera-understanding-exposure/



** TODO [#A] skybox

** TODO [#A] advanced ci/cd
*** DONE use ci for deploy and pf(performance) test
CLOSED: [2018-01-06 Sat 17:53]
write gulp task

ci test pf:
allow fail
deploy to github(ci pf data json):
    not pass pf test



use build stages:
parallel job(e.g. test)







refactor:
wonder-benchmark: add "local" folder for data json files



main branch:
master, test, dev

dev push: unit test
no deploy

test push: unit test + pf test(all must pass)
deploy to test environment(on tag)

master push: unit test + pf test(all must pass)
deploy to produce environment(on tag)
deploy to github release(on tag)(file: wd.js)





(in test branch)
deploy to test/pre-pubilish environment:
should pass all test(pf,unit test)

deploy to AWS Lambda?
(user can run engine example online)



(in mater branch)
deploy to produce environment

*** TODO auto run render test and pf test in every day
send report email to developer


*** TODO auto generate samples from render test/pf test
render test



pf test









**** TODO ci deploy samples to github page?





*** TODO improve ci->pf test
cache benchmark
*** TODO test in diferent browser/mobiles
https://www.browserstack.com/automate

* 3.0.0
** Main Point
*** Editor
- more editor?
- support more engine functions
*** Engine
- optimize
- more main functions


** TODO add physics
http://www.html5gamedevs.com/topic/33392-whats-your-prefered-physics-engine-these-days/

https://github.com/lo-th/Oimo.js/

use Oimo?
because its performance is better than cannon.js

e.g. worker example

Oimo:
2000 gamgObjects:
physics worker: 16ms


Cannon:
2000 gamgObjects:
physics worker: >100ms



*** TODO use web worker



** TODO [#B] Voxel
https://interplayoflight.wordpress.com/2015/04/08/the-rendering-technology-of-skysaga-infinite-isles/
*** TODO voxel terrain
https://www.youtube.com/watch?v=51JNyjBcDMo

https://forum.unity.com/threads/terrainengine-voxel-terrain-smooth-cubic-2d-hexagonal-infinite-procedural-terrain.174595/


marching cube
destruct, dig hole
lod
multi materials(multi layer)

voxel billboard?(for tree, grass)

triplanar mapping




*** TODO voxel model(which can be destruct)(static?)
marching cube

**** TODO generate a new uv map of a new polygon model generated by a voxel model(marching cube?) which can map the same texture of the origin polyon model's
voxel farm:

http://procworld.blogspot.com/2016/05/applying-textures-to-voxels.html
***** We had to write voxelization routines that captured the UV data with no ambiguities.



***** we had to make sure our dual contouring methods could output the UV data back into triangle form.

The realtime compression had to be now aware of the UV space, and remain fast enough for realtime use.
And last but not least we knew voxel content would be edited and modified in many sorts of cruel ways. We had to understand how the UV data would survive (or not) all these
transformations. 

***** internal voxels do not have UV info, but a regular material that is exposed when the surface voxels are gone.
***** Only the surface voxels have UVs.






Rethinking Texture Mapping:
http://www.cemyuksel.com/courses/conferences/siggraph2017-rethinking_texture_mapping/rethinking_texture_mapping_course_notes.pdf



volume-encoded-uv-maps
http://vcg.isti.cnr.it/volume-encoded-uv-maps/volume-encoded-uv-maps.pdf
http://vcg.isti.cnr.it/volume-encoded-uv-maps/volume-encoded-uv-maps_additional.pdf
http://vcg.isti.cnr.it/volume-encoded-uv-maps/



tileTrees
https://www-sop.inria.fr/reves/Basilic/2007/LD07/LD07.pdf
https://www-sop.inria.fr/reves/Basilic/2008/DL08/



octree texture
http://www.antexel.com/sylefeb/octreetex/
http://www.cs.jhu.edu/~misha/ReadingSeminar/Papers/DeBry02.pdf
http://www.cs.jhu.edu/~misha/ReadingSeminar/Papers/Benson02.pdf



Examining Automatic Texture Mapping of Arbitrary Terrains: https://www.diva-portal.org/smash/get/diva2:422722/FULLTEXT01.pdf


should learn from book:
《TEXTURING And MODELING A Procedural Approach》


polycube map:
http://vcg.isti.cnr.it/polycubemaps/


Perfect Spatial Hashing:
http://hhoppe.com/perfecthash.pdf
https://github.com/Jinxit/psh




need study:
Unified Texture Management for Arbitrary Meshes: http://evasion.inrialpes.fr/Publications/2004/LDN04/RR-5210.pdf






***** TODO references
https://emnh.github.io/rts-blog/2017/04/25/10_voxelization.html
Examining Automatic Texture Mapping of Arbitrary Terrains: https://www.diva-portal.org/smash/get/diva2:422722/FULLTEXT01.pdf


**** TODO construct examples in game
In Infinity: Battlescape, we designed our space stations, bases and factories to be modular. This means that we model &
texture independant modules, which can get attached together in various configuration layouts. Here's one of such
layouts for a space station: https://www.gamedev.net/blogs/entry/2262351-patch-0160-screenshots/

https://www.youtube.com/watch?v=DQg6mpjQMRo&feature=youtu.be














** TODO [#B] add cull

https://gamedev.autodesk.com/blogs/1/post/353597490642337181

https://www.slideshare.net/DICEStudio/culling-the-battlefield-data-oriented-design-in-practice


in do way:
use array instead of octree?



each gameObject(meshRenderer) support not join cull:
judge whether has collider component?


instance:
static instance can only be all culled
dynamic instance can cull each instance

////*** TODO use webassembly???(or not!?)
use arraybuffer to store render data!?

fall back to js version





*** TODO use web worker for sort and cull





**** TODO move create_basic_render_object_buffer, sort, cull to new worker: cull


main worker state->gameObjectRecord->component maps should be sharedArrayBuffer data?

or send component data (get from component maps) to worker?



**** TODO dispose should defer 2 frame instead of defer 1 frame!



**** TODO support add/remove cull worker job


*** TODO Frustum culling
Calculating the objects that exist between the camera near and far plane.



*** TODO add Occlusion culling?
Occlusion culling: Calculating which objects are hidden behind other objects and excluding them from rendering.

refer to unity->https://docs.unity3d.com/Manual/OcclusionCulling.html



** TODO [#B] sort by shader,geometry group, texture

*** TODO optimize sort render command(WebglRenderer.ts)
use radix sort?

refer to:
https://www.byvoid.com/zhs/blog/sort-radix
http://www.dataorienteddesign.com/dodmain/node10.html


use web worker to parallel sort:
It is possible to make this last stage of the process parallel by having each sorter ignore any values that it reads
that are outside its working set, meaning that each worker reads through the entire set of values gathering for their
bucket, but there is still a small chance of non-linear performance due to having to write to nearby memory on different
threads. During the time the worker collects the elements for its bucket, it could be generating the counts for the next
radix in the sequence, only requiring a summing before use in the next pass of the data, mitigating the cost of
iterating over the whole set with every worker. 

If your data is not simple enough to radix sort, you might be better off using a merge sort or a quick sort, but there
are other sorts that work very well if you know the length of your sortable buffer at compile time, such as sorting
networks. Through merge-sort is not itself a concurrent algorithm, the many early merges can be run in parallel, only
the final merge is serial, and with a quick pre-parse of the to-be-merged data, you can finalise with two threads rather
than one by starting from both ends (you need to make sure that the mergers don't run out of data). Though quick sort is
not a concurrent algorithm each of the sub stages can be run in parallel. These algorithms are inherently serial, but
can be turned into partially parallelisable algorithms with O(log n) latency. 



Multi-threaded sorting: Each command bucket can be sorted independently, in parallel.



** TODO [#B] animation
*** TODO [#A] skin animation
**** TODO data oriented

*** TODO [#A] articulated animation






** TODO [#C] add tag


** TODO shadow


* more

** TODO [#C] finish book draft
take about 60 days to finish




** TODO [#B] dynamic load asset

refer to unity->AssetBundle:
https://docs.unity3d.com/Manual/AssetBundlesIntro.html
http://gad.qq.com/article/detail/10033








** TODO advanced debug

*** TODO show debug info
setting.json add:
debug: {
    open_contract_check: true,
    show_debug_info: true
}



show worker, main fps


show worker, main memeory


show total fps,render time


show each job's render time, memory


*** TODO can log error,fatal state json data(when open debug). we can reproduce the bug by the json data!!!





** TODO schedule frame rate(define in json config)
**** TODO can specify fps 
e.g.
keep 60/40/30 fps

**** TODO can specify worker fps 
e.g. 
main worker: 1 frame sync(must sync at each frame)
render worker: 2 frame sync
physics worker: 1 frame sync
xxx worker: 3 frame sync


** TODO e2e test for multi thread




** TODO [#C] add ray tracing pipeline

refer to DXR: 
https://blogs.msdn.microsoft.com/directx/2018/03/19/announcing-microsoft-directx-raytracing/
https://www.zhihu.com/question/269149582
https://devblogs.nvidia.com/introduction-nvidia-rtx-directx-raytracing/



** TODO [#B] optimize
*** TODO compress typeArrays
e.g. Texture typeArray->wrapS, wrapT, ... should share the same Uint8Array with different value range




** TODO [#C] advanced asset
*** TODO support gltf extensions
https://github.com/KhronosGroup/glTF/tree/master/extensions



*** TODO convert .wd to .gltf
**** TODO fix share material but not share geometry!
(node->extension->material)


*** TODO [#A] add more data in .wd
add:
clone
instance
...



**** TODO material add side




*** TODO optimize generate wd
when generate wd->generate gltf, add extended data:
geometry type(box, customGeometry)


not add box geometry data to buffer!





*** TODO add AssetDatabase to support aync load asset
(move out to be a project in wonder group?)

*** TODO use backgroup task api
https://developer.mozilla.org/en-US/docs/Web/API/Background_Tasks_API











*** TODO [#B] write fbx python sdk converter
refer to wonder, claygl


use 2019.1 python sdk


should export light data



** TODO [#C] advanced animation
*** TODO skin optimize
**** TODO use blender to build skin animation


fix yuan bao problem:
the animation and the static model's rotation is not the same!(animation has rotate(0,-90,0)!)
(
gltf is correct(monster is correct)(by compare with threejs)

but fbx is wrong!(xsi_man_skinning.fbx)(compare with threejs=>webgl_loader_fbx.html)
maybe the bind shape matrix is wrong? need parse!?
# parse bind shape matrix:
# http://www.gamedev.net/topic/574309-solved-fbx-animation-problems/
# refer to babylonjs=>SkinInfo.cpp=>bindPoses ?)




**** TODO support multi animations in one fbx
pass fbx=>converter=>multi skin animations!:
use blender to add multi animations of one model in one .fbx file
learn how to separate and combine character and its props animations!


**** TODO optimize skin
https://engineering.riotgames.com/news/compressing-skeletal-animation-data




fbx:
  parse bind shape matrix:
  http://www.gamedev.net/topic/574309-solved-fbx-animation-problems/
  refer to babylonjs=>SkinInfo.cpp=>bindPoses ?




optimize: 
not update tranlation,scale(pre handle key frame data)



write to texture:
judge vertex texture


//add basic optimize


add render test


optimize: 
//if bindShapeMatrix is identify, set it null and not multiply

other "todo" optimizes


optimize:
query max uniform data arr count



compute in gpu
1) Make sure that the size of the bones array is correct. Often times, you will find that part of the mesh is skinned fine while the other parts are not skinned correctly. If so make sure the size of the bones array is correct.  

There are two things that you have to be careful about.





**** TODO publish


*** TODO optimize skeleton animation
把所有不同的角色的骨骼相关的矩阵和变换信息写入到纹理里(refer to playcanvas, threejs)
(fallback:if not support vertex texture, pass uniform data instead)
http://ftp.opengpu.org/forum.php?mod=viewthread&tid=18164&extra=page%3D1

http://http.developer.nvidia.com/GPUGems3/gpugems3_ch02.html

https://github.com/mrdoob/three.js/issues/3187


use Skinned Instancing

use quaternion for rotate skeleton



**** TODO not update no-render gameObjects' skeleton


*** TODO support animation blend

**** TODO publish

*** TODO support animation control(using action to control)
refer to unity:
https://docs.unity3d.com/Manual/AnimationSection.html



support time limit logic(e.g. isTimeExceed5000)

support frame control

**** TODO refactor:extract AnimationEngine and move out to be a new project

**** TODO publish




*** TODO morph animation



** TODO [#C] add action component





** TODO [#C] advanced transform
*** TODO optimize quaternion
四元数的压缩存储
https://blog.codingnow.com/2017/11/quaternion_compress.html#more

https://www.gamedev.net/forums/topic/461253-compressed-quaternions/



** TODO [#C] advanced event
*** TODO support more touch event
**** TODO touch->point event support pointscale event



** TODO [#C] advanced camera
*** TODO fly camera controller
use pointer lock:
https://www.zhangxinxu.com/wordpress/2017/10/js-api-pointer-lock/


** TODO [#C] Machine Learning
https://unity3d.com/cn/machine-learning


** TODO iap
Unity IAP makes it easy to implement in-app purchases in your application across the most popular App stores.
https://blogs.unity3d.com/cn/2018/03/18/3-ways-to-make-more-money-with-unity-iap-promo/
https://docs.unity3d.com/Manual/UnityIAP.html



** TODO [#B] advanced ui
*** TODO [#A] advanced imgui
**** TODO more controls
https://docs.unity3d.com/Manual/gui-Controls.html

**** TODO layout
https://docs.unity3d.com/Manual/gui-Layout.html

***** TODO auto layout

**** TODO custom style
https://docs.unity3d.com/Manual/gui-Customization.html

**** TODO extend
https://docs.unity3d.com/Manual/gui-Extending.html

***** TODO use can write custom controls?
add your own custom drawing functions 


**** TODO optimize
***** TODO use sissor


*** TODO [#B] rmgui(retain mode gui)

*** TODO [#C] compress buffer data
refer to http://ourmachinery.com/post/ui-rendering-using-primitive-buffers/



*** TODO [#C] single draw call?
http://ourmachinery.com/post/one-draw-call-ui/




* Tool
** TODO webgl inspector which can work with multi thread
